
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000184c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a74  08001a74  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001a74  08001a74  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a74  08001a74  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a78  08001a78  00011a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08001a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          000001cc  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000296f  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b3e  00000000  00000000  00022a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000230  00000000  00000000  00023578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000017e  00000000  00000000  000237a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019f3a  00000000  00000000  00023926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003ac6  00000000  00000000  0003d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d9fd  00000000  00000000  00041326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b98  00000000  00000000  000ced24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000cf8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080019c4 	.word	0x080019c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080019c4 	.word	0x080019c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <button_init>:
 */
#include "button.h"
/**
 *
 */
void button_init(Button_t *b, read_fc r, ticks_fc t, uint32_t db, uint16_t pin){
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	b->debounceMs = db;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	61da      	str	r2, [r3, #28]
	b->read = r;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	605a      	str	r2, [r3, #4]
	b->ticks = t;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]
	b->old_state = 0;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2200      	movs	r2, #0
 8000294:	741a      	strb	r2, [r3, #16]
	b->pressTime = 0;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
	b->flags = 0;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2200      	movs	r2, #0
 80002a0:	761a      	strb	r2, [r3, #24]
	b->pin = pin;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	8b3a      	ldrh	r2, [r7, #24]
 80002a6:	801a      	strh	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <button_update>:
/**
 *
 */
void button_update(Button_t *b){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	read_fc read;
	ticks_fc bt_getTcks;
	if(b->read == NULL || b->ticks == NULL){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	f000 808a 	beq.w	80003da <button_update+0x126>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f000 8085 	beq.w	80003da <button_update+0x126>
		return;
	}
	read = b->read;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	617b      	str	r3, [r7, #20]
	bt_getTcks = b->ticks;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	613b      	str	r3, [r7, #16]

	uint8_t new_state = read(b->pin);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	4610      	mov	r0, r2
 80002e6:	4798      	blx	r3
 80002e8:	4603      	mov	r3, r0
 80002ea:	73fb      	strb	r3, [r7, #15]
	/*state verify*/
	if(new_state != b->old_state){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7c1b      	ldrb	r3, [r3, #16]
 80002f0:	7bfa      	ldrb	r2, [r7, #15]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d005      	beq.n	8000302 <button_update+0x4e>
		b->time_state_change = bt_getTcks();
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	4798      	blx	r3
 80002fa:	4602      	mov	r2, r0
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	615a      	str	r2, [r3, #20]
 8000300:	e067      	b.n	80003d2 <button_update+0x11e>
	}
	else if(new_state){
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d048      	beq.n	800039a <button_update+0xe6>
		if(!(b->flags & ONPRESS_SENT)){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7e1b      	ldrb	r3, [r3, #24]
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d128      	bne.n	8000366 <button_update+0xb2>
			//debounce
			if((bt_getTcks() - b->time_state_change)>= b->debounceMs){
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	4798      	blx	r3
 8000318:	4602      	mov	r2, r0
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	69db      	ldr	r3, [r3, #28]
 8000324:	429a      	cmp	r2, r3
 8000326:	d354      	bcc.n	80003d2 <button_update+0x11e>
				b->flags &=~ ONRELEASE_SENT;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	7e1b      	ldrb	r3, [r3, #24]
 800032c:	f023 0302 	bic.w	r3, r3, #2
 8000330:	b2da      	uxtb	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	761a      	strb	r2, [r3, #24]
				b->flags |= ONPRESS_SENT | ONPRESS_EVT;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	7e1b      	ldrb	r3, [r3, #24]
 800033a:	f043 0309 	orr.w	r3, r3, #9
 800033e:	b2da      	uxtb	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	761a      	strb	r2, [r3, #24]
				//
				b->keepalive.cnt = 0;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	849a      	strh	r2, [r3, #36]	; 0x24
				b->keepalive.last_time = bt_getTcks();
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	4798      	blx	r3
 800034e:	4602      	mov	r2, r0
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	621a      	str	r2, [r3, #32]

				b->time_state_change = bt_getTcks();
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	4798      	blx	r3
 8000358:	4602      	mov	r2, r0
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	615a      	str	r2, [r3, #20]
				b->pressTime = 0;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	e035      	b.n	80003d2 <button_update+0x11e>
			}
		}else{
			if((bt_getTcks() - b->keepalive.last_time)>= KEEP_ALIVE_PERIOD){
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	4798      	blx	r3
 800036a:	4602      	mov	r2, r0
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	2b63      	cmp	r3, #99	; 0x63
 8000374:	d92d      	bls.n	80003d2 <button_update+0x11e>
				b->keepalive.last_time = bt_getTcks();
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	4798      	blx	r3
 800037a:	4602      	mov	r2, r0
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	621a      	str	r2, [r3, #32]
				b->keepalive.cnt += 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000384:	3301      	adds	r3, #1
 8000386:	b29a      	uxth	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	849a      	strh	r2, [r3, #36]	; 0x24
				b->pressTime += KEEP_ALIVE_PERIOD;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	e01b      	b.n	80003d2 <button_update+0x11e>
			}
		}
	}else{
		if(b->flags & ONPRESS_SENT){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	7e1b      	ldrb	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d015      	beq.n	80003d2 <button_update+0x11e>
			b->pressTime = 0;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
			b->flags &=~ (ONPRESS_SENT | ONPRESS_EVT | BUTTON_TIME_ONCE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	7e1b      	ldrb	r3, [r3, #24]
 80003b0:	f023 0319 	bic.w	r3, r3, #25
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	761a      	strb	r2, [r3, #24]
			b->flags |= ONRELEASE_SENT;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	7e1b      	ldrb	r3, [r3, #24]
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	761a      	strb	r2, [r3, #24]
			b->time_state_change = bt_getTcks();
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	4798      	blx	r3
 80003cc:	4602      	mov	r2, r0
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	615a      	str	r2, [r3, #20]
		}
	}
	b->old_state = new_state;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7bfa      	ldrb	r2, [r7, #15]
 80003d6:	741a      	strb	r2, [r3, #16]
	return;
 80003d8:	e000      	b.n	80003dc <button_update+0x128>
		return;
 80003da:	bf00      	nop
}
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <button_on_press>:
/**
 *
 */
bool button_on_press(Button_t *b){
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
	if(b->flags & ONPRESS_EVT){
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7e1b      	ldrb	r3, [r3, #24]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <button_on_press+0x26>
		b->flags &=~ ONPRESS_EVT;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7e1b      	ldrb	r3, [r3, #24]
 80003fa:	f023 0308 	bic.w	r3, r3, #8
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	761a      	strb	r2, [r3, #24]
		return true;
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <button_on_press+0x28>
	}
	return false;
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <button_on_release>:

/**
 *
 */
bool button_on_release(Button_t *b){
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	if(b->flags & ONRELEASE_SENT){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7e1b      	ldrb	r3, [r3, #24]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	d008      	beq.n	800043c <button_on_release+0x26>
		b->flags &=~ ONRELEASE_SENT;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7e1b      	ldrb	r3, [r3, #24]
 800042e:	f023 0302 	bic.w	r3, r3, #2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	761a      	strb	r2, [r3, #24]
		return true;
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <button_on_release+0x28>
	}
	return false;
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <button_press_time_is_greater>:
/**
 *
 */
bool button_press_time_is_greater(Button_t *b, uint32_t ms, bool once){
 800044a:	b480      	push	{r7}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	4613      	mov	r3, r2
 8000456:	71fb      	strb	r3, [r7, #7]
	if(once == true){
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d013      	beq.n	8000486 <button_press_time_is_greater+0x3c>
		if((b->pressTime >= ms) &&(!(b->flags & BUTTON_TIME_ONCE))){
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	429a      	cmp	r2, r3
 8000466:	d815      	bhi.n	8000494 <button_press_time_is_greater+0x4a>
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	7e1b      	ldrb	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10f      	bne.n	8000494 <button_press_time_is_greater+0x4a>
			b->flags |= BUTTON_TIME_ONCE;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	7e1b      	ldrb	r3, [r3, #24]
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	b2da      	uxtb	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	761a      	strb	r2, [r3, #24]
			return true;
 8000482:	2301      	movs	r3, #1
 8000484:	e007      	b.n	8000496 <button_press_time_is_greater+0x4c>
		}
	}else{
		if(b->pressTime >= ms){
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	429a      	cmp	r2, r3
 800048e:	d801      	bhi.n	8000494 <button_press_time_is_greater+0x4a>
			return true;
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <button_press_time_is_greater+0x4c>
		}
	}
	return false;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <delay_ms>:

volatile uint32_t uwTicks = 0;
/**
 * @brief
 */
void delay_ms(uint32_t delay){
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b084      	sub	sp, #16
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	uint32_t tickStart = getTicks();
 80004aa:	f000 f80f 	bl	80004cc <getTicks>
 80004ae:	60f8      	str	r0, [r7, #12]
	while((getTicks() - tickStart)< delay){
 80004b0:	bf00      	nop
 80004b2:	f000 f80b 	bl	80004cc <getTicks>
 80004b6:	4602      	mov	r2, r0
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d8f7      	bhi.n	80004b2 <delay_ms+0x10>

	}
	return;
 80004c2:	bf00      	nop
}
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <getTicks>:
/**
 * @brief
 */
uint32_t getTicks(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	return uwTicks;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <getTicks+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000070 	.word	0x20000070

080004e4 <ticksUpdate>:

/**
 * @brief
 */
void ticksUpdate(uint32_t ms){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uwTicks += ms;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <ticksUpdate+0x20>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <ticksUpdate+0x20>)
 80004f6:	6013      	str	r3, [r2, #0]
	return;
 80004f8:	bf00      	nop
}
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	20000070 	.word	0x20000070

08000508 <lcd_init>:
/*Private function -----------------------------------*/
static void lcd_cmd(LCD_t *d, uint8_t cmd);
static void lcd_data(LCD_t *d, uint8_t data);
static void lcd_cursorSet(LCD_t *d, uint8_t col, uint8_t row);
/*Function definition --------------------------------*/
void lcd_init(LCD_t *d, lcd_write_nb_fc w, lcd_delay_fc del, uint8_t cols, uint8_t rows){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	70fb      	strb	r3, [r7, #3]
	if(LCD_ASSERT(d) || LCD_ASSERT(w) || LCD_ASSERT(del)){
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d06c      	beq.n	80005f6 <lcd_init+0xee>
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d069      	beq.n	80005f6 <lcd_init+0xee>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d066      	beq.n	80005f6 <lcd_init+0xee>
		return;
	}
	d->writeNb = w;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	609a      	str	r2, [r3, #8]
	d->delay = del;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	60da      	str	r2, [r3, #12]
	d->Rows = rows;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	7e3a      	ldrb	r2, [r7, #24]
 8000538:	70da      	strb	r2, [r3, #3]
	d->Cols = cols;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	78fa      	ldrb	r2, [r7, #3]
 800053e:	711a      	strb	r2, [r3, #4]
	/**
	 * init
	 */
	d->currentX = 0;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	2200      	movs	r2, #0
 8000544:	715a      	strb	r2, [r3, #5]
	d->currentY = 0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2200      	movs	r2, #0
 800054a:	719a      	strb	r2, [r3, #6]

	d->DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2200      	movs	r2, #0
 8000550:	705a      	strb	r2, [r3, #1]
	if(d->Rows>1){
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	78db      	ldrb	r3, [r3, #3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d906      	bls.n	8000568 <lcd_init+0x60>
		d->DisplayFunction |=  HD44780_2LINE;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	785b      	ldrb	r3, [r3, #1]
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	b2da      	uxtb	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	705a      	strb	r2, [r3, #1]
	}

	/*Init 4 bit mode*/
	d->writeNb(0x03, 0);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	2100      	movs	r1, #0
 800056e:	2003      	movs	r0, #3
 8000570:	4798      	blx	r3
	d->delay(45);		//45ms
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	202d      	movs	r0, #45	; 0x2d
 8000578:	4798      	blx	r3

	d->writeNb(0x03, 0);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	2100      	movs	r1, #0
 8000580:	2003      	movs	r0, #3
 8000582:	4798      	blx	r3
	d->delay(45);		//45ms
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	202d      	movs	r0, #45	; 0x2d
 800058a:	4798      	blx	r3

	d->writeNb(0x03, 0);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	2100      	movs	r1, #0
 8000592:	2003      	movs	r0, #3
 8000594:	4798      	blx	r3
	d->delay(45);		//45ms
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	202d      	movs	r0, #45	; 0x2d
 800059c:	4798      	blx	r3

	d->writeNb(0x02, 0);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2100      	movs	r1, #0
 80005a4:	2002      	movs	r0, #2
 80005a6:	4798      	blx	r3
	d->delay(1);		//1ms
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	2001      	movs	r0, #1
 80005ae:	4798      	blx	r3

	lcd_cmd(d, HD44780_FUNCTIONSET | d->DisplayFunction);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0320 	orr.w	r3, r3, #32
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 f8c5 	bl	800074c <lcd_cmd>

	d->DisplayControl = HD44780_DISPLAYON;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2204      	movs	r2, #4
 80005c6:	701a      	strb	r2, [r3, #0]
	lcd_displayOn(d);
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f886 	bl	80006da <lcd_displayOn>

	lcd_clear(d);
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f000 f815 	bl	80005fe <lcd_clear>

	d->DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2202      	movs	r2, #2
 80005d8:	709a      	strb	r2, [r3, #2]

	lcd_cmd(d, HD44780_ENTRYMODESET | d->DisplayMode);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f8b0 	bl	800074c <lcd_cmd>


	d->delay(45);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	202d      	movs	r0, #45	; 0x2d
 80005f2:	4798      	blx	r3
 80005f4:	e000      	b.n	80005f8 <lcd_init+0xf0>
		return;
 80005f6:	bf00      	nop
}
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <lcd_clear>:

void lcd_clear(LCD_t *d){
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	lcd_cmd(d, HD44780_CLEARDISPLAY);
 8000606:	2101      	movs	r1, #1
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f89f 	bl	800074c <lcd_cmd>
	d->delay(3);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	2003      	movs	r0, #3
 8000614:	4798      	blx	r3
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <lcd_puts>:

void lcd_puts(LCD_t *d, uint8_t x, uint8_t y, char *str){
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	4613      	mov	r3, r2
 800062e:	72bb      	strb	r3, [r7, #10]
	lcd_cursorSet(d, x, y);
 8000630:	7aba      	ldrb	r2, [r7, #10]
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	4619      	mov	r1, r3
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f8d4 	bl	80007e4 <lcd_cursorSet>
	while(*str){
 800063c:	e044      	b.n	80006c8 <lcd_puts+0xaa>
		if(d->currentX >= d->Cols){
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	795a      	ldrb	r2, [r3, #5]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	d310      	bcc.n	800066c <lcd_puts+0x4e>
			d->currentX = 0;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2200      	movs	r2, #0
 800064e:	715a      	strb	r2, [r3, #5]
			d->currentY += 1;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	719a      	strb	r2, [r3, #6]
			lcd_cursorSet(d, d->currentX, d->currentY);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	7959      	ldrb	r1, [r3, #5]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	461a      	mov	r2, r3
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f000 f8bc 	bl	80007e4 <lcd_cursorSet>
		}
		if(*str == '\n'){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b0a      	cmp	r3, #10
 8000672:	d10e      	bne.n	8000692 <lcd_puts+0x74>
			d->currentY += 1;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	799b      	ldrb	r3, [r3, #6]
 8000678:	3301      	adds	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	719a      	strb	r2, [r3, #6]
			lcd_cursorSet(d, d->currentX, d->currentY);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	7959      	ldrb	r1, [r3, #5]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	461a      	mov	r2, r3
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f000 f8aa 	bl	80007e4 <lcd_cursorSet>
 8000690:	e017      	b.n	80006c2 <lcd_puts+0xa4>
		}else if(*str == '\r'){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d107      	bne.n	80006aa <lcd_puts+0x8c>
			lcd_cursorSet(d, 0, d->currentY);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	799b      	ldrb	r3, [r3, #6]
 800069e:	461a      	mov	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f000 f89e 	bl	80007e4 <lcd_cursorSet>
 80006a8:	e00b      	b.n	80006c2 <lcd_puts+0xa4>
		}else{
			lcd_data(d, *str);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f872 	bl	800079a <lcd_data>
			d->currentX +=1;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	715a      	strb	r2, [r3, #5]
		}
		str += 1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
	while(*str){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1b6      	bne.n	800063e <lcd_puts+0x20>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <lcd_displayOn>:

void lcd_displayOn(LCD_t *d){
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	d->DisplayControl |=  HD44780_DISPLAYON;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	701a      	strb	r2, [r3, #0]
	lcd_cmd(d, HD44780_DISPLAYCONTROL | d->DisplayControl);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f825 	bl	800074c <lcd_cmd>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_printf>:
void lcd_putCustom(LCD_t *d, uint8_t x, uint8_t y, uint8_t location){
	lcd_cursorSet(d, x, y);
	lcd_data(d, location);
}

void lcd_printf(LCD_t *d, uint8_t x, uint8_t y, char *format, ...){
 800070a:	b408      	push	{r3}
 800070c:	b580      	push	{r7, lr}
 800070e:	b099      	sub	sp, #100	; 0x64
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
 8000718:	4613      	mov	r3, r2
 800071a:	70bb      	strb	r3, [r7, #2]
	char str[80];
	/**
	 * printf("var:%.1f temp", T);
	 */
	va_list args;
	va_start(args, format);
 800071c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000720:	60fb      	str	r3, [r7, #12]
	vsprintf(str, format, args);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fcc4 	bl	80010b8 <vsiprintf>
	lcd_puts(d, x, y, str);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	78ba      	ldrb	r2, [r7, #2]
 8000736:	78f9      	ldrb	r1, [r7, #3]
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff70 	bl	800061e <lcd_puts>
	va_end(args);
	return;
 800073e:	bf00      	nop
}
 8000740:	3764      	adds	r7, #100	; 0x64
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b001      	add	sp, #4
 800074a:	4770      	bx	lr

0800074c <lcd_cmd>:

/*Private function ------------------------------------------*/
void lcd_cmd(LCD_t *d, uint8_t cmd){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	d->writeNb((cmd>>4) & 0x0F,0);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	78fa      	ldrb	r2, [r7, #3]
 800075e:	0912      	lsrs	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	2100      	movs	r1, #0
 8000764:	4610      	mov	r0, r2
 8000766:	4798      	blx	r3
	d->writeNb(cmd & 0x0F,0);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	f002 020f 	and.w	r2, r2, #15
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	2100      	movs	r1, #0
 8000776:	4610      	mov	r0, r2
 8000778:	4798      	blx	r3
	if(cmd < 4){
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d804      	bhi.n	800078a <lcd_cmd+0x3e>
		d->delay(3);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2003      	movs	r0, #3
 8000786:	4798      	blx	r3
	}else{
		d->delay(2);
	}
	return;
 8000788:	e004      	b.n	8000794 <lcd_cmd+0x48>
		d->delay(2);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	2002      	movs	r0, #2
 8000790:	4798      	blx	r3
	return;
 8000792:	bf00      	nop
}
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <lcd_data>:

static void lcd_data(LCD_t *d, uint8_t data){
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
	uint32_t delay = 50;
 80007a6:	2332      	movs	r3, #50	; 0x32
 80007a8:	60fb      	str	r3, [r7, #12]
	d->writeNb((data>>4) & 0x0F,1);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	0912      	lsrs	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	2101      	movs	r1, #1
 80007b6:	4610      	mov	r0, r2
 80007b8:	4798      	blx	r3
	d->writeNb(data & 0x0F,1);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	78fa      	ldrb	r2, [r7, #3]
 80007c0:	f002 020f 	and.w	r2, r2, #15
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	2101      	movs	r1, #1
 80007c8:	4610      	mov	r0, r2
 80007ca:	4798      	blx	r3
	//d->delay(1);
	while(delay-->0);
 80007cc:	bf00      	nop
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	60fa      	str	r2, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1fa      	bne.n	80007ce <lcd_data+0x34>
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <lcd_cursorSet>:

static void lcd_cursorSet(LCD_t *d, uint8_t col, uint8_t row){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
 80007f0:	4613      	mov	r3, r2
 80007f2:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <lcd_cursorSet+0x58>)
 80007f6:	60fb      	str	r3, [r7, #12]
	if(row>= d->Rows){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	78ba      	ldrb	r2, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d301      	bcc.n	8000806 <lcd_cursorSet+0x22>
		row = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	70bb      	strb	r3, [r7, #2]
	}
	d->currentX = col;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	715a      	strb	r2, [r3, #5]
	d->currentY = row;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	78ba      	ldrb	r2, [r7, #2]
 8000810:	719a      	strb	r2, [r3, #6]

	lcd_cmd(d, HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8000812:	78bb      	ldrb	r3, [r7, #2]
 8000814:	3310      	adds	r3, #16
 8000816:	443b      	add	r3, r7
 8000818:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4413      	add	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	b25b      	sxtb	r3, r3
 8000824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000828:	b25b      	sxtb	r3, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ff8c 	bl	800074c <lcd_cmd>
	return;
 8000834:	bf00      	nop
}
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	54144000 	.word	0x54144000

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f7ff ffc2 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <main>:
 */
uint8_t readButton(uint8_t pin);


int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af02      	add	r7, sp, #8
	 * base tiempo
	 * ticks = Fsysclk/freq
	 * ticks = 16E+6/1000
	 * ticks = 16000
	 */
	SystemCoreClockUpdate();
 80008de:	f000 f921 	bl	8000b24 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <main+0xcc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <main+0xd0>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	099b      	lsrs	r3, r3, #6
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffd0 	bl	8000894 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, 15);
 80008f4:	210f      	movs	r1, #15
 80008f6:	f04f 30ff 	mov.w	r0, #4294967295
 80008fa:	f7ff ffa1 	bl	8000840 <__NVIC_SetPriority>
	/**
	 * hardware init
	 */
	hvac_io_init();
 80008fe:	f000 fa03 	bl	8000d08 <hvac_io_init>
	/**
	 * button
	 */
	button_init(&sw1, readButton, getTicks, 20, 0);
 8000902:	2300      	movs	r3, #0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2314      	movs	r3, #20
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <main+0xd4>)
 800090a:	4929      	ldr	r1, [pc, #164]	; (80009b0 <main+0xd8>)
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <main+0xdc>)
 800090e:	f7ff fcaf 	bl	8000270 <button_init>
	button_init(&sw2, readButton, getTicks, 15, 1);
 8000912:	2301      	movs	r3, #1
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	230f      	movs	r3, #15
 8000918:	4a24      	ldr	r2, [pc, #144]	; (80009ac <main+0xd4>)
 800091a:	4925      	ldr	r1, [pc, #148]	; (80009b0 <main+0xd8>)
 800091c:	4826      	ldr	r0, [pc, #152]	; (80009b8 <main+0xe0>)
 800091e:	f7ff fca7 	bl	8000270 <button_init>
	/**
	 * LCD
	 */
	lcd_init(&display, hvac_lcd_write_nb, delay_ms, 20, 4);
 8000922:	2304      	movs	r3, #4
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2314      	movs	r3, #20
 8000928:	4a24      	ldr	r2, [pc, #144]	; (80009bc <main+0xe4>)
 800092a:	4925      	ldr	r1, [pc, #148]	; (80009c0 <main+0xe8>)
 800092c:	4825      	ldr	r0, [pc, #148]	; (80009c4 <main+0xec>)
 800092e:	f7ff fdeb 	bl	8000508 <lcd_init>

	lcd_printf(&display, 0, 0, "DISPLAY\r\nSTM32-2024\r\n");
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <main+0xf0>)
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	4822      	ldr	r0, [pc, #136]	; (80009c4 <main+0xec>)
 800093a:	f7ff fee6 	bl	800070a <lcd_printf>
	/* Loop forever */
	for(;;){
		if(button_on_press(&sw1)){
 800093e:	481d      	ldr	r0, [pc, #116]	; (80009b4 <main+0xdc>)
 8000940:	f7ff fd4f 	bl	80003e2 <button_on_press>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d009      	beq.n	800095e <main+0x86>
			lcd_clear(&display);
 800094a:	481e      	ldr	r0, [pc, #120]	; (80009c4 <main+0xec>)
 800094c:	f7ff fe57 	bl	80005fe <lcd_clear>
			lcd_puts(&display, 0, 0,"button on press");
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <main+0xf4>)
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <main+0xec>)
 8000958:	f7ff fe61 	bl	800061e <lcd_puts>
 800095c:	e7ef      	b.n	800093e <main+0x66>
		}
		else if(button_press_time_is_greater(&sw1, 3000, 1)){
 800095e:	2201      	movs	r2, #1
 8000960:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <main+0xdc>)
 8000966:	f7ff fd70 	bl	800044a <button_press_time_is_greater>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <main+0xac>
			lcd_clear(&display);
 8000970:	4814      	ldr	r0, [pc, #80]	; (80009c4 <main+0xec>)
 8000972:	f7ff fe44 	bl	80005fe <lcd_clear>
			lcd_puts(&display, 0, 0, "button press to 3 sec.");
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <main+0xf8>)
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <main+0xec>)
 800097e:	f7ff fe4e 	bl	800061e <lcd_puts>
 8000982:	e7dc      	b.n	800093e <main+0x66>
		}else if(button_on_release(&sw1)){
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <main+0xdc>)
 8000986:	f7ff fd46 	bl	8000416 <button_on_release>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0d6      	beq.n	800093e <main+0x66>
			lcd_clear(&display);
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0xec>)
 8000992:	f7ff fe34 	bl	80005fe <lcd_clear>
			lcd_puts(&display, 0, 0,"button on release");
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <main+0xfc>)
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <main+0xec>)
 800099e:	f7ff fe3e 	bl	800061e <lcd_puts>
		if(button_on_press(&sw1)){
 80009a2:	e7cc      	b.n	800093e <main+0x66>
 80009a4:	20000000 	.word	0x20000000
 80009a8:	10624dd3 	.word	0x10624dd3
 80009ac:	080004cd 	.word	0x080004cd
 80009b0:	080009d9 	.word	0x080009d9
 80009b4:	20000074 	.word	0x20000074
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	080004a3 	.word	0x080004a3
 80009c0:	08000fed 	.word	0x08000fed
 80009c4:	200000c4 	.word	0x200000c4
 80009c8:	080019dc 	.word	0x080019dc
 80009cc:	080019f4 	.word	0x080019f4
 80009d0:	08001a04 	.word	0x08001a04
 80009d4:	08001a1c 	.word	0x08001a1c

080009d8 <readButton>:

	}
}

/*Function definition --------------------------------------------------------*/
uint8_t readButton(uint8_t pin){
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
	switch(pin){
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <readButton+0x1a>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d004      	beq.n	80009fa <readButton+0x22>
 80009f0:	e00c      	b.n	8000a0c <readButton+0x34>
	case 0:
		state = GPIOX_IDR(SW1);				//pull down
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <readButton+0x44>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	73fb      	strb	r3, [r7, #15]
		break;
 80009f8:	e008      	b.n	8000a0c <readButton+0x34>
	case 1:
		state = GPIOX_IDR(SW2) == 0 ? 1 : 0;//pulsador en pull up
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <readButton+0x48>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf0c      	ite	eq
 8000a02:	2301      	moveq	r3, #1
 8000a04:	2300      	movne	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	73fb      	strb	r3, [r7, #15]
		break;
 8000a0a:	bf00      	nop
	}
	return state;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	42400200 	.word	0x42400200
 8000a20:	42400204 	.word	0x42400204

08000a24 <SysTick_Handler>:
#include "button.h"
#include "hvac_ll_driver.h"
extern Button_t sw1;
extern Button_t sw2;

void SysTick_Handler(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/**
	 *
	 */
	ticksUpdate(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fd5b 	bl	80004e4 <ticksUpdate>
	button_update(&sw1);
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <SysTick_Handler+0x1c>)
 8000a30:	f7ff fc40 	bl	80002b4 <button_update>
	button_update(&sw2);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <SysTick_Handler+0x20>)
 8000a36:	f7ff fc3d 	bl	80002b4 <button_update>
	return;
 8000a3a:	bf00      	nop
}
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000074 	.word	0x20000074
 8000a44:	2000009c 	.word	0x2000009c

08000a48 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<PINX(CONTACT1)){
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <EXTI9_5_IRQHandler+0x1c>
		EXTI->PR |= 1<<PINX(CONTACT1);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a62:	6153      	str	r3, [r2, #20]
		//Todo

	}
	if(EXTI->PR & 1<<PINX(CONTACT2)){
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <EXTI9_5_IRQHandler+0x34>
		EXTI->PR |= 1<<PINX(CONTACT2);
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <EXTI9_5_IRQHandler+0x40>)
 8000a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7a:	6153      	str	r3, [r2, #20]
		//Todo

	}
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40013c00 	.word	0x40013c00

08000a8c <HardFault_Handler>:

void HardFault_Handler(void){
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	while(1){
 8000a90:	e7fe      	b.n	8000a90 <HardFault_Handler+0x4>
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f000 fb02 	bl	80010cc <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20020000 	.word	0x20020000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200000d4 	.word	0x200000d4
 8000afc:	20000220 	.word	0x20000220

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d011      	beq.n	8000b72 <SystemCoreClockUpdate+0x4e>
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d844      	bhi.n	8000bde <SystemCoreClockUpdate+0xba>
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <SystemCoreClockUpdate+0x3e>
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d004      	beq.n	8000b6a <SystemCoreClockUpdate+0x46>
 8000b60:	e03d      	b.n	8000bde <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000b64:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <SystemCoreClockUpdate+0xf4>)
 8000b66:	601a      	str	r2, [r3, #0]
      break;
 8000b68:	e03d      	b.n	8000be6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <SystemCoreClockUpdate+0xf8>)
 8000b6e:	601a      	str	r2, [r3, #0]
      break;
 8000b70:	e039      	b.n	8000be6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	0d9b      	lsrs	r3, r3, #22
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b86:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00c      	beq.n	8000ba8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <SystemCoreClockUpdate+0xf8>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000b98:	6852      	ldr	r2, [r2, #4]
 8000b9a:	0992      	lsrs	r2, r2, #6
 8000b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e00b      	b.n	8000bc0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <SystemCoreClockUpdate+0xf4>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000bb2:	6852      	ldr	r2, [r2, #4]
 8000bb4:	0992      	lsrs	r2, r2, #6
 8000bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000bda:	6013      	str	r3, [r2, #0]
      break;
 8000bdc:	e003      	b.n	8000be6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <SystemCoreClockUpdate+0xf4>)
 8000be2:	601a      	str	r2, [r3, #0]
      break;
 8000be4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemCoreClockUpdate+0xec>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <SystemCoreClockUpdate+0xfc>)
 8000bf2:	5cd3      	ldrb	r3, [r2, r3]
 8000bf4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <SystemCoreClockUpdate+0xf0>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40023800 	.word	0x40023800
 8000c14:	20000000 	.word	0x20000000
 8000c18:	00f42400 	.word	0x00f42400
 8000c1c:	007a1200 	.word	0x007a1200
 8000c20:	08001a30 	.word	0x08001a30

08000c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff ff6a 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c52:	f000 fa41 	bl	80010d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fe3f 	bl	80008d8 <main>

08000c5a <LoopForever>:

LoopForever:
  b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   r0, =_estack
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000c68:	08001a7c 	.word	0x08001a7c
  ldr r2, =_sbss
 8000c6c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000c70:	20000220 	.word	0x20000220

08000c74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <__NVIC_EnableIRQ>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <hvac_io_init>:
#define CONTACT2_PIN_SOURCE	0x4
#elif (GPIOX_PORTNUM(CONTACT2) == GPIOX_PORTNUM_F )
#define CONTACT2_PIN_SOURCE	0x5
#endif
/*Function definition ----------------------------------*/
void hvac_io_init(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	uint32_t exti_cr_msk;
	uint32_t factor;
	/**
	 * SW1
	 */
	GPIOX_CLK_EN(SW1); GPIOX_CLK_EN(SW2);
 8000d0e:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a69      	ldr	r2, [pc, #420]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a66      	ldr	r2, [pc, #408]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(SW1, 0);
 8000d26:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a64      	ldr	r2, [pc, #400]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(SW2, 0);
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a61      	ldr	r2, [pc, #388]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d38:	f023 030c 	bic.w	r3, r3, #12
 8000d3c:	6013      	str	r3, [r2, #0]
	//GPIOX_PUPDR(SW1, 1);
	GPIOX_PUPDR(SW2, 1);
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	4a5e      	ldr	r2, [pc, #376]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	60d3      	str	r3, [r2, #12]
 8000d4a:	4b5c      	ldr	r3, [pc, #368]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4a5b      	ldr	r2, [pc, #364]	; (8000ebc <hvac_io_init+0x1b4>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	60d3      	str	r3, [r2, #12]
	/**
	 * Contactos
	 */
	GPIOX_CLK_EN(CONTACT1); GPIOX_CLK_EN(CONTACT2);
 8000d56:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(CONTACT1, 0);
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a53      	ldr	r2, [pc, #332]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d78:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(CONTACT2, 0);
 8000d7a:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a50      	ldr	r2, [pc, #320]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d84:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(CONTACT1, 2);
 8000d86:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	4a4d      	ldr	r2, [pc, #308]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da0:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(CONTACT2, 2);
 8000da2:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	4a46      	ldr	r2, [pc, #280]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	60d3      	str	r3, [r2, #12]
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db8:	60d3      	str	r3, [r2, #12]
	/**
	 * Relay
	 */
	GPIOX_CLK_EN(RELAY1);GPIOX_CLK_EN(RELAY2);
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a3b      	ldr	r2, [pc, #236]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(RELAY1, 0x1);
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000dda:	4a3a      	ldr	r2, [pc, #232]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000ddc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de0:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(RELAY2, 0x1);
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000dea:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df0:	6013      	str	r3, [r2, #0]

	/**
	 * STATUS
	 */
	GPIOX_CLK_EN(STATUS);
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(STATUS, 1);
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000e06:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <hvac_io_init+0x1bc>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6013      	str	r3, [r2, #0]
	/**
	 * Alarma de contacto
	 */
	GPIOX_CLK_EN(A_CONTACT);
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(A_CONTACT, 1);
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e22:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <hvac_io_init+0x1b8>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6013      	str	r3, [r2, #0]
	/**
	 * interrupcion
	 */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <hvac_io_init+0x1b0>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
	EXTI->IMR |= (1<<PINX(CONTACT1) | 1<<PINX(CONTACT2));
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e40:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= (1<<PINX(CONTACT1) | 1<<PINX(CONTACT2));
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e4c:	6093      	str	r3, [r2, #8]
	EXTI->PR |= (1<<PINX(CONTACT1) | 1<<PINX(CONTACT2));
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <hvac_io_init+0x1c0>)
 8000e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e58:	6153      	str	r3, [r2, #20]

	/**
	 * ASIGNAR EL PIN EN EL REGISTRO DE CONFIGURACION
	 */
	factor = CONTACT1_EXTICR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	603b      	str	r3, [r7, #0]
	if(factor == 0){
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <hvac_io_init+0x162>
		exti_cr_msk = PINX(CONTACT1) * 4;
 8000e64:	2318      	movs	r3, #24
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	e009      	b.n	8000e7e <hvac_io_init+0x176>
	}else{
		/**
		 * 14 % (4 * 3) = 2 * 4 -> 8
		 */
		exti_cr_msk = (PINX(CONTACT1) % (factor * 4 ))  * 4;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	2206      	movs	r2, #6
 8000e70:	fbb2 f1f3 	udiv	r1, r2, r3
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
	}
	SYSCFG->EXTICR[CONTACT1_EXTICR] &=~ 0xF<<exti_cr_msk;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <hvac_io_init+0x1c4>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f06f 010f 	mvn.w	r1, #15
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <hvac_io_init+0x1c4>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[CONTACT1_EXTICR] |= CONTACT1_PIN_SOURCE<<exti_cr_msk;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <hvac_io_init+0x1c4>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <hvac_io_init+0x1c4>)
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	60d3      	str	r3, [r2, #12]
	factor = CONTACT2_EXTICR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
	if(factor == 0){
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10e      	bne.n	8000ed0 <hvac_io_init+0x1c8>
		exti_cr_msk = PINX(CONTACT2) * 4;
 8000eb2:	231c      	movs	r3, #28
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e015      	b.n	8000ee4 <hvac_io_init+0x1dc>
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40013c00 	.word	0x40013c00
 8000ecc:	40013800 	.word	0x40013800
	}else{
		/**
		 * 14 % (4 * 3) = 2 * 4 -> 8
		 */
		exti_cr_msk = (PINX(CONTACT2) % (factor * 4 ))  * 4;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	fbb2 f1f3 	udiv	r1, r2, r3
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
	}

	SYSCFG->EXTICR[CONTACT2_EXTICR] &=~ 0xF<<exti_cr_msk;
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <hvac_io_init+0x2d4>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f06f 010f 	mvn.w	r1, #15
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <hvac_io_init+0x2d4>)
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[CONTACT2_EXTICR] |= CONTACT2_PIN_SOURCE<<exti_cr_msk;
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <hvac_io_init+0x2d4>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2101      	movs	r1, #1
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4611      	mov	r1, r2
 8000f08:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <hvac_io_init+0x2d4>)
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	60d3      	str	r3, [r2, #12]

	/**
	 * CONFIGURAR NVIC
	 */
	NVIC_EnableIRQ(CONTACT1_IRQn);
 8000f0e:	2017      	movs	r0, #23
 8000f10:	f7ff feb2 	bl	8000c78 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CONTACT2_IRQn);
 8000f14:	2017      	movs	r0, #23
 8000f16:	f7ff feaf 	bl	8000c78 <__NVIC_EnableIRQ>
	NVIC_SetPriority(CONTACT1_IRQn, CONTACT1_PRI);
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	2017      	movs	r0, #23
 8000f1e:	f7ff fec9 	bl	8000cb4 <__NVIC_SetPriority>
	NVIC_SetPriority(CONTACT2_IRQn, CONTACT2_PRI);
 8000f22:	2103      	movs	r1, #3
 8000f24:	2017      	movs	r0, #23
 8000f26:	f7ff fec5 	bl	8000cb4 <__NVIC_SetPriority>

	/**
	 * LCD
	 */
	GPIOX_CLK_EN(LCD_RS); GPIOX_CLK_EN(LCD_EN);
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_CLK_EN(LCD_D4); GPIOX_CLK_EN(LCD_D5);
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_CLK_EN(LCD_D6); GPIOX_CLK_EN(LCD_D7);
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <hvac_io_init+0x2d8>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOX_MODER(LCD_RS, 0x1); GPIOX_MODER(LCD_EN, 1);
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <hvac_io_init+0x2dc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <hvac_io_init+0x2dc>)
 8000f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <hvac_io_init+0x2dc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <hvac_io_init+0x2dc>)
 8000f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f90:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(LCD_D4, 0x1); GPIOX_MODER(LCD_D5, 1);
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 030c 	bic.w	r3, r3, #12
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(LCD_D6, 0x1); GPIOX_MODER(LCD_D7, 1);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <hvac_io_init+0x2e0>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	6013      	str	r3, [r2, #0]


	return;
 8000fd2:	bf00      	nop
}
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00

08000fec <hvac_lcd_write_nb>:


void hvac_lcd_write_nb(uint8_t data, uint8_t control){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint32_t delay = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
	//GPIOX_ODR(LCD_D7, (data>>3) & 0x1);
	GPIOX_ODR(LCD_D7) = (data>>3) & 0x1;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <hvac_lcd_write_nb+0x88>)
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D6) = (data>>2) & 0x1;
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <hvac_lcd_write_nb+0x8c>)
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D5) = (data>>1) & 0x1;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <hvac_lcd_write_nb+0x90>)
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D4) = (data) & 0x1;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <hvac_lcd_write_nb+0x94>)
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

	GPIOX_ODR(LCD_EN) = 0;
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <hvac_lcd_write_nb+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
	if(control){
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <hvac_lcd_write_nb+0x5c>
		GPIOX_ODR(LCD_RS) = 1;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <hvac_lcd_write_nb+0x9c>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e002      	b.n	800104e <hvac_lcd_write_nb+0x62>
	}else{
		GPIOX_ODR(LCD_RS) = 0;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <hvac_lcd_write_nb+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
	}
	GPIOX_ODR(LCD_EN) = 1;
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <hvac_lcd_write_nb+0x98>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
	while(delay-->0);
 8001054:	bf00      	nop
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	60fa      	str	r2, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1fa      	bne.n	8001056 <hvac_lcd_write_nb+0x6a>
	GPIOX_ODR(LCD_EN) = 0;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <hvac_lcd_write_nb+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	return;
 8001066:	bf00      	nop
}
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	4241828c 	.word	0x4241828c
 8001078:	42418288 	.word	0x42418288
 800107c:	42418284 	.word	0x42418284
 8001080:	42418280 	.word	0x42418280
 8001084:	424102b0 	.word	0x424102b0
 8001088:	424102ac 	.word	0x424102ac

0800108c <_vsiprintf_r>:
 800108c:	b500      	push	{lr}
 800108e:	b09b      	sub	sp, #108	; 0x6c
 8001090:	9100      	str	r1, [sp, #0]
 8001092:	9104      	str	r1, [sp, #16]
 8001094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001098:	9105      	str	r1, [sp, #20]
 800109a:	9102      	str	r1, [sp, #8]
 800109c:	4905      	ldr	r1, [pc, #20]	; (80010b4 <_vsiprintf_r+0x28>)
 800109e:	9103      	str	r1, [sp, #12]
 80010a0:	4669      	mov	r1, sp
 80010a2:	f000 f991 	bl	80013c8 <_svfiprintf_r>
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	b01b      	add	sp, #108	; 0x6c
 80010ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b2:	bf00      	nop
 80010b4:	ffff0208 	.word	0xffff0208

080010b8 <vsiprintf>:
 80010b8:	4613      	mov	r3, r2
 80010ba:	460a      	mov	r2, r1
 80010bc:	4601      	mov	r1, r0
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <vsiprintf+0x10>)
 80010c0:	6800      	ldr	r0, [r0, #0]
 80010c2:	f7ff bfe3 	b.w	800108c <_vsiprintf_r>
 80010c6:	bf00      	nop
 80010c8:	20000050 	.word	0x20000050

080010cc <__errno>:
 80010cc:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <__errno+0x8>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000050 	.word	0x20000050

080010d8 <__libc_init_array>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	4d0d      	ldr	r5, [pc, #52]	; (8001110 <__libc_init_array+0x38>)
 80010dc:	4c0d      	ldr	r4, [pc, #52]	; (8001114 <__libc_init_array+0x3c>)
 80010de:	1b64      	subs	r4, r4, r5
 80010e0:	10a4      	asrs	r4, r4, #2
 80010e2:	2600      	movs	r6, #0
 80010e4:	42a6      	cmp	r6, r4
 80010e6:	d109      	bne.n	80010fc <__libc_init_array+0x24>
 80010e8:	4d0b      	ldr	r5, [pc, #44]	; (8001118 <__libc_init_array+0x40>)
 80010ea:	4c0c      	ldr	r4, [pc, #48]	; (800111c <__libc_init_array+0x44>)
 80010ec:	f000 fc6a 	bl	80019c4 <_init>
 80010f0:	1b64      	subs	r4, r4, r5
 80010f2:	10a4      	asrs	r4, r4, #2
 80010f4:	2600      	movs	r6, #0
 80010f6:	42a6      	cmp	r6, r4
 80010f8:	d105      	bne.n	8001106 <__libc_init_array+0x2e>
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
 80010fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001100:	4798      	blx	r3
 8001102:	3601      	adds	r6, #1
 8001104:	e7ee      	b.n	80010e4 <__libc_init_array+0xc>
 8001106:	f855 3b04 	ldr.w	r3, [r5], #4
 800110a:	4798      	blx	r3
 800110c:	3601      	adds	r6, #1
 800110e:	e7f2      	b.n	80010f6 <__libc_init_array+0x1e>
 8001110:	08001a74 	.word	0x08001a74
 8001114:	08001a74 	.word	0x08001a74
 8001118:	08001a74 	.word	0x08001a74
 800111c:	08001a78 	.word	0x08001a78

08001120 <__retarget_lock_acquire_recursive>:
 8001120:	4770      	bx	lr

08001122 <__retarget_lock_release_recursive>:
 8001122:	4770      	bx	lr

08001124 <_free_r>:
 8001124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001126:	2900      	cmp	r1, #0
 8001128:	d044      	beq.n	80011b4 <_free_r+0x90>
 800112a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800112e:	9001      	str	r0, [sp, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	f1a1 0404 	sub.w	r4, r1, #4
 8001136:	bfb8      	it	lt
 8001138:	18e4      	addlt	r4, r4, r3
 800113a:	f000 f8df 	bl	80012fc <__malloc_lock>
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <_free_r+0x94>)
 8001140:	9801      	ldr	r0, [sp, #4]
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	b933      	cbnz	r3, 8001154 <_free_r+0x30>
 8001146:	6063      	str	r3, [r4, #4]
 8001148:	6014      	str	r4, [r2, #0]
 800114a:	b003      	add	sp, #12
 800114c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001150:	f000 b8da 	b.w	8001308 <__malloc_unlock>
 8001154:	42a3      	cmp	r3, r4
 8001156:	d908      	bls.n	800116a <_free_r+0x46>
 8001158:	6825      	ldr	r5, [r4, #0]
 800115a:	1961      	adds	r1, r4, r5
 800115c:	428b      	cmp	r3, r1
 800115e:	bf01      	itttt	eq
 8001160:	6819      	ldreq	r1, [r3, #0]
 8001162:	685b      	ldreq	r3, [r3, #4]
 8001164:	1949      	addeq	r1, r1, r5
 8001166:	6021      	streq	r1, [r4, #0]
 8001168:	e7ed      	b.n	8001146 <_free_r+0x22>
 800116a:	461a      	mov	r2, r3
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	b10b      	cbz	r3, 8001174 <_free_r+0x50>
 8001170:	42a3      	cmp	r3, r4
 8001172:	d9fa      	bls.n	800116a <_free_r+0x46>
 8001174:	6811      	ldr	r1, [r2, #0]
 8001176:	1855      	adds	r5, r2, r1
 8001178:	42a5      	cmp	r5, r4
 800117a:	d10b      	bne.n	8001194 <_free_r+0x70>
 800117c:	6824      	ldr	r4, [r4, #0]
 800117e:	4421      	add	r1, r4
 8001180:	1854      	adds	r4, r2, r1
 8001182:	42a3      	cmp	r3, r4
 8001184:	6011      	str	r1, [r2, #0]
 8001186:	d1e0      	bne.n	800114a <_free_r+0x26>
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	6053      	str	r3, [r2, #4]
 800118e:	440c      	add	r4, r1
 8001190:	6014      	str	r4, [r2, #0]
 8001192:	e7da      	b.n	800114a <_free_r+0x26>
 8001194:	d902      	bls.n	800119c <_free_r+0x78>
 8001196:	230c      	movs	r3, #12
 8001198:	6003      	str	r3, [r0, #0]
 800119a:	e7d6      	b.n	800114a <_free_r+0x26>
 800119c:	6825      	ldr	r5, [r4, #0]
 800119e:	1961      	adds	r1, r4, r5
 80011a0:	428b      	cmp	r3, r1
 80011a2:	bf04      	itt	eq
 80011a4:	6819      	ldreq	r1, [r3, #0]
 80011a6:	685b      	ldreq	r3, [r3, #4]
 80011a8:	6063      	str	r3, [r4, #4]
 80011aa:	bf04      	itt	eq
 80011ac:	1949      	addeq	r1, r1, r5
 80011ae:	6021      	streq	r1, [r4, #0]
 80011b0:	6054      	str	r4, [r2, #4]
 80011b2:	e7ca      	b.n	800114a <_free_r+0x26>
 80011b4:	b003      	add	sp, #12
 80011b6:	bd30      	pop	{r4, r5, pc}
 80011b8:	20000218 	.word	0x20000218

080011bc <sbrk_aligned>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	4e0e      	ldr	r6, [pc, #56]	; (80011f8 <sbrk_aligned+0x3c>)
 80011c0:	460c      	mov	r4, r1
 80011c2:	6831      	ldr	r1, [r6, #0]
 80011c4:	4605      	mov	r5, r0
 80011c6:	b911      	cbnz	r1, 80011ce <sbrk_aligned+0x12>
 80011c8:	f000 fba6 	bl	8001918 <_sbrk_r>
 80011cc:	6030      	str	r0, [r6, #0]
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	f000 fba1 	bl	8001918 <_sbrk_r>
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	d00a      	beq.n	80011f0 <sbrk_aligned+0x34>
 80011da:	1cc4      	adds	r4, r0, #3
 80011dc:	f024 0403 	bic.w	r4, r4, #3
 80011e0:	42a0      	cmp	r0, r4
 80011e2:	d007      	beq.n	80011f4 <sbrk_aligned+0x38>
 80011e4:	1a21      	subs	r1, r4, r0
 80011e6:	4628      	mov	r0, r5
 80011e8:	f000 fb96 	bl	8001918 <_sbrk_r>
 80011ec:	3001      	adds	r0, #1
 80011ee:	d101      	bne.n	80011f4 <sbrk_aligned+0x38>
 80011f0:	f04f 34ff 	mov.w	r4, #4294967295
 80011f4:	4620      	mov	r0, r4
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	2000021c 	.word	0x2000021c

080011fc <_malloc_r>:
 80011fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001200:	1ccd      	adds	r5, r1, #3
 8001202:	f025 0503 	bic.w	r5, r5, #3
 8001206:	3508      	adds	r5, #8
 8001208:	2d0c      	cmp	r5, #12
 800120a:	bf38      	it	cc
 800120c:	250c      	movcc	r5, #12
 800120e:	2d00      	cmp	r5, #0
 8001210:	4607      	mov	r7, r0
 8001212:	db01      	blt.n	8001218 <_malloc_r+0x1c>
 8001214:	42a9      	cmp	r1, r5
 8001216:	d905      	bls.n	8001224 <_malloc_r+0x28>
 8001218:	230c      	movs	r3, #12
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	2600      	movs	r6, #0
 800121e:	4630      	mov	r0, r6
 8001220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012f8 <_malloc_r+0xfc>
 8001228:	f000 f868 	bl	80012fc <__malloc_lock>
 800122c:	f8d8 3000 	ldr.w	r3, [r8]
 8001230:	461c      	mov	r4, r3
 8001232:	bb5c      	cbnz	r4, 800128c <_malloc_r+0x90>
 8001234:	4629      	mov	r1, r5
 8001236:	4638      	mov	r0, r7
 8001238:	f7ff ffc0 	bl	80011bc <sbrk_aligned>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	4604      	mov	r4, r0
 8001240:	d155      	bne.n	80012ee <_malloc_r+0xf2>
 8001242:	f8d8 4000 	ldr.w	r4, [r8]
 8001246:	4626      	mov	r6, r4
 8001248:	2e00      	cmp	r6, #0
 800124a:	d145      	bne.n	80012d8 <_malloc_r+0xdc>
 800124c:	2c00      	cmp	r4, #0
 800124e:	d048      	beq.n	80012e2 <_malloc_r+0xe6>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	4631      	mov	r1, r6
 8001254:	4638      	mov	r0, r7
 8001256:	eb04 0903 	add.w	r9, r4, r3
 800125a:	f000 fb5d 	bl	8001918 <_sbrk_r>
 800125e:	4581      	cmp	r9, r0
 8001260:	d13f      	bne.n	80012e2 <_malloc_r+0xe6>
 8001262:	6821      	ldr	r1, [r4, #0]
 8001264:	1a6d      	subs	r5, r5, r1
 8001266:	4629      	mov	r1, r5
 8001268:	4638      	mov	r0, r7
 800126a:	f7ff ffa7 	bl	80011bc <sbrk_aligned>
 800126e:	3001      	adds	r0, #1
 8001270:	d037      	beq.n	80012e2 <_malloc_r+0xe6>
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	442b      	add	r3, r5
 8001276:	6023      	str	r3, [r4, #0]
 8001278:	f8d8 3000 	ldr.w	r3, [r8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d038      	beq.n	80012f2 <_malloc_r+0xf6>
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	42a2      	cmp	r2, r4
 8001284:	d12b      	bne.n	80012de <_malloc_r+0xe2>
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	e00f      	b.n	80012ac <_malloc_r+0xb0>
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	1b52      	subs	r2, r2, r5
 8001290:	d41f      	bmi.n	80012d2 <_malloc_r+0xd6>
 8001292:	2a0b      	cmp	r2, #11
 8001294:	d917      	bls.n	80012c6 <_malloc_r+0xca>
 8001296:	1961      	adds	r1, r4, r5
 8001298:	42a3      	cmp	r3, r4
 800129a:	6025      	str	r5, [r4, #0]
 800129c:	bf18      	it	ne
 800129e:	6059      	strne	r1, [r3, #4]
 80012a0:	6863      	ldr	r3, [r4, #4]
 80012a2:	bf08      	it	eq
 80012a4:	f8c8 1000 	streq.w	r1, [r8]
 80012a8:	5162      	str	r2, [r4, r5]
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	4638      	mov	r0, r7
 80012ae:	f104 060b 	add.w	r6, r4, #11
 80012b2:	f000 f829 	bl	8001308 <__malloc_unlock>
 80012b6:	f026 0607 	bic.w	r6, r6, #7
 80012ba:	1d23      	adds	r3, r4, #4
 80012bc:	1af2      	subs	r2, r6, r3
 80012be:	d0ae      	beq.n	800121e <_malloc_r+0x22>
 80012c0:	1b9b      	subs	r3, r3, r6
 80012c2:	50a3      	str	r3, [r4, r2]
 80012c4:	e7ab      	b.n	800121e <_malloc_r+0x22>
 80012c6:	42a3      	cmp	r3, r4
 80012c8:	6862      	ldr	r2, [r4, #4]
 80012ca:	d1dd      	bne.n	8001288 <_malloc_r+0x8c>
 80012cc:	f8c8 2000 	str.w	r2, [r8]
 80012d0:	e7ec      	b.n	80012ac <_malloc_r+0xb0>
 80012d2:	4623      	mov	r3, r4
 80012d4:	6864      	ldr	r4, [r4, #4]
 80012d6:	e7ac      	b.n	8001232 <_malloc_r+0x36>
 80012d8:	4634      	mov	r4, r6
 80012da:	6876      	ldr	r6, [r6, #4]
 80012dc:	e7b4      	b.n	8001248 <_malloc_r+0x4c>
 80012de:	4613      	mov	r3, r2
 80012e0:	e7cc      	b.n	800127c <_malloc_r+0x80>
 80012e2:	230c      	movs	r3, #12
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4638      	mov	r0, r7
 80012e8:	f000 f80e 	bl	8001308 <__malloc_unlock>
 80012ec:	e797      	b.n	800121e <_malloc_r+0x22>
 80012ee:	6025      	str	r5, [r4, #0]
 80012f0:	e7dc      	b.n	80012ac <_malloc_r+0xb0>
 80012f2:	605b      	str	r3, [r3, #4]
 80012f4:	deff      	udf	#255	; 0xff
 80012f6:	bf00      	nop
 80012f8:	20000218 	.word	0x20000218

080012fc <__malloc_lock>:
 80012fc:	4801      	ldr	r0, [pc, #4]	; (8001304 <__malloc_lock+0x8>)
 80012fe:	f7ff bf0f 	b.w	8001120 <__retarget_lock_acquire_recursive>
 8001302:	bf00      	nop
 8001304:	20000214 	.word	0x20000214

08001308 <__malloc_unlock>:
 8001308:	4801      	ldr	r0, [pc, #4]	; (8001310 <__malloc_unlock+0x8>)
 800130a:	f7ff bf0a 	b.w	8001122 <__retarget_lock_release_recursive>
 800130e:	bf00      	nop
 8001310:	20000214 	.word	0x20000214

08001314 <__ssputs_r>:
 8001314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001318:	688e      	ldr	r6, [r1, #8]
 800131a:	461f      	mov	r7, r3
 800131c:	42be      	cmp	r6, r7
 800131e:	680b      	ldr	r3, [r1, #0]
 8001320:	4682      	mov	sl, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4690      	mov	r8, r2
 8001326:	d82c      	bhi.n	8001382 <__ssputs_r+0x6e>
 8001328:	898a      	ldrh	r2, [r1, #12]
 800132a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800132e:	d026      	beq.n	800137e <__ssputs_r+0x6a>
 8001330:	6965      	ldr	r5, [r4, #20]
 8001332:	6909      	ldr	r1, [r1, #16]
 8001334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001338:	eba3 0901 	sub.w	r9, r3, r1
 800133c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001340:	1c7b      	adds	r3, r7, #1
 8001342:	444b      	add	r3, r9
 8001344:	106d      	asrs	r5, r5, #1
 8001346:	429d      	cmp	r5, r3
 8001348:	bf38      	it	cc
 800134a:	461d      	movcc	r5, r3
 800134c:	0553      	lsls	r3, r2, #21
 800134e:	d527      	bpl.n	80013a0 <__ssputs_r+0x8c>
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff ff53 	bl	80011fc <_malloc_r>
 8001356:	4606      	mov	r6, r0
 8001358:	b360      	cbz	r0, 80013b4 <__ssputs_r+0xa0>
 800135a:	6921      	ldr	r1, [r4, #16]
 800135c:	464a      	mov	r2, r9
 800135e:	f000 faeb 	bl	8001938 <memcpy>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	6126      	str	r6, [r4, #16]
 8001370:	6165      	str	r5, [r4, #20]
 8001372:	444e      	add	r6, r9
 8001374:	eba5 0509 	sub.w	r5, r5, r9
 8001378:	6026      	str	r6, [r4, #0]
 800137a:	60a5      	str	r5, [r4, #8]
 800137c:	463e      	mov	r6, r7
 800137e:	42be      	cmp	r6, r7
 8001380:	d900      	bls.n	8001384 <__ssputs_r+0x70>
 8001382:	463e      	mov	r6, r7
 8001384:	6820      	ldr	r0, [r4, #0]
 8001386:	4632      	mov	r2, r6
 8001388:	4641      	mov	r1, r8
 800138a:	f000 faab 	bl	80018e4 <memmove>
 800138e:	68a3      	ldr	r3, [r4, #8]
 8001390:	1b9b      	subs	r3, r3, r6
 8001392:	60a3      	str	r3, [r4, #8]
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	4433      	add	r3, r6
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	2000      	movs	r0, #0
 800139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a0:	462a      	mov	r2, r5
 80013a2:	f000 fad7 	bl	8001954 <_realloc_r>
 80013a6:	4606      	mov	r6, r0
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d1e0      	bne.n	800136e <__ssputs_r+0x5a>
 80013ac:	6921      	ldr	r1, [r4, #16]
 80013ae:	4650      	mov	r0, sl
 80013b0:	f7ff feb8 	bl	8001124 <_free_r>
 80013b4:	230c      	movs	r3, #12
 80013b6:	f8ca 3000 	str.w	r3, [sl]
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	81a3      	strh	r3, [r4, #12]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	e7e9      	b.n	800139c <__ssputs_r+0x88>

080013c8 <_svfiprintf_r>:
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	4698      	mov	r8, r3
 80013ce:	898b      	ldrh	r3, [r1, #12]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	b09d      	sub	sp, #116	; 0x74
 80013d4:	4607      	mov	r7, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	4614      	mov	r4, r2
 80013da:	d50e      	bpl.n	80013fa <_svfiprintf_r+0x32>
 80013dc:	690b      	ldr	r3, [r1, #16]
 80013de:	b963      	cbnz	r3, 80013fa <_svfiprintf_r+0x32>
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	f7ff ff0b 	bl	80011fc <_malloc_r>
 80013e6:	6028      	str	r0, [r5, #0]
 80013e8:	6128      	str	r0, [r5, #16]
 80013ea:	b920      	cbnz	r0, 80013f6 <_svfiprintf_r+0x2e>
 80013ec:	230c      	movs	r3, #12
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	e0d0      	b.n	8001598 <_svfiprintf_r+0x1d0>
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	616b      	str	r3, [r5, #20]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9309      	str	r3, [sp, #36]	; 0x24
 80013fe:	2320      	movs	r3, #32
 8001400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001404:	f8cd 800c 	str.w	r8, [sp, #12]
 8001408:	2330      	movs	r3, #48	; 0x30
 800140a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80015b0 <_svfiprintf_r+0x1e8>
 800140e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001412:	f04f 0901 	mov.w	r9, #1
 8001416:	4623      	mov	r3, r4
 8001418:	469a      	mov	sl, r3
 800141a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800141e:	b10a      	cbz	r2, 8001424 <_svfiprintf_r+0x5c>
 8001420:	2a25      	cmp	r2, #37	; 0x25
 8001422:	d1f9      	bne.n	8001418 <_svfiprintf_r+0x50>
 8001424:	ebba 0b04 	subs.w	fp, sl, r4
 8001428:	d00b      	beq.n	8001442 <_svfiprintf_r+0x7a>
 800142a:	465b      	mov	r3, fp
 800142c:	4622      	mov	r2, r4
 800142e:	4629      	mov	r1, r5
 8001430:	4638      	mov	r0, r7
 8001432:	f7ff ff6f 	bl	8001314 <__ssputs_r>
 8001436:	3001      	adds	r0, #1
 8001438:	f000 80a9 	beq.w	800158e <_svfiprintf_r+0x1c6>
 800143c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800143e:	445a      	add	r2, fp
 8001440:	9209      	str	r2, [sp, #36]	; 0x24
 8001442:	f89a 3000 	ldrb.w	r3, [sl]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a1 	beq.w	800158e <_svfiprintf_r+0x1c6>
 800144c:	2300      	movs	r3, #0
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001456:	f10a 0a01 	add.w	sl, sl, #1
 800145a:	9304      	str	r3, [sp, #16]
 800145c:	9307      	str	r3, [sp, #28]
 800145e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001462:	931a      	str	r3, [sp, #104]	; 0x68
 8001464:	4654      	mov	r4, sl
 8001466:	2205      	movs	r2, #5
 8001468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800146c:	4850      	ldr	r0, [pc, #320]	; (80015b0 <_svfiprintf_r+0x1e8>)
 800146e:	f7fe feaf 	bl	80001d0 <memchr>
 8001472:	9a04      	ldr	r2, [sp, #16]
 8001474:	b9d8      	cbnz	r0, 80014ae <_svfiprintf_r+0xe6>
 8001476:	06d0      	lsls	r0, r2, #27
 8001478:	bf44      	itt	mi
 800147a:	2320      	movmi	r3, #32
 800147c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001480:	0711      	lsls	r1, r2, #28
 8001482:	bf44      	itt	mi
 8001484:	232b      	movmi	r3, #43	; 0x2b
 8001486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800148a:	f89a 3000 	ldrb.w	r3, [sl]
 800148e:	2b2a      	cmp	r3, #42	; 0x2a
 8001490:	d015      	beq.n	80014be <_svfiprintf_r+0xf6>
 8001492:	9a07      	ldr	r2, [sp, #28]
 8001494:	4654      	mov	r4, sl
 8001496:	2000      	movs	r0, #0
 8001498:	f04f 0c0a 	mov.w	ip, #10
 800149c:	4621      	mov	r1, r4
 800149e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014a2:	3b30      	subs	r3, #48	; 0x30
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d94d      	bls.n	8001544 <_svfiprintf_r+0x17c>
 80014a8:	b1b0      	cbz	r0, 80014d8 <_svfiprintf_r+0x110>
 80014aa:	9207      	str	r2, [sp, #28]
 80014ac:	e014      	b.n	80014d8 <_svfiprintf_r+0x110>
 80014ae:	eba0 0308 	sub.w	r3, r0, r8
 80014b2:	fa09 f303 	lsl.w	r3, r9, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	46a2      	mov	sl, r4
 80014bc:	e7d2      	b.n	8001464 <_svfiprintf_r+0x9c>
 80014be:	9b03      	ldr	r3, [sp, #12]
 80014c0:	1d19      	adds	r1, r3, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfbb      	ittet	lt
 80014ca:	425b      	neglt	r3, r3
 80014cc:	f042 0202 	orrlt.w	r2, r2, #2
 80014d0:	9307      	strge	r3, [sp, #28]
 80014d2:	9307      	strlt	r3, [sp, #28]
 80014d4:	bfb8      	it	lt
 80014d6:	9204      	strlt	r2, [sp, #16]
 80014d8:	7823      	ldrb	r3, [r4, #0]
 80014da:	2b2e      	cmp	r3, #46	; 0x2e
 80014dc:	d10c      	bne.n	80014f8 <_svfiprintf_r+0x130>
 80014de:	7863      	ldrb	r3, [r4, #1]
 80014e0:	2b2a      	cmp	r3, #42	; 0x2a
 80014e2:	d134      	bne.n	800154e <_svfiprintf_r+0x186>
 80014e4:	9b03      	ldr	r3, [sp, #12]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	9203      	str	r2, [sp, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfb8      	it	lt
 80014f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80014f4:	3402      	adds	r4, #2
 80014f6:	9305      	str	r3, [sp, #20]
 80014f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80015c0 <_svfiprintf_r+0x1f8>
 80014fc:	7821      	ldrb	r1, [r4, #0]
 80014fe:	2203      	movs	r2, #3
 8001500:	4650      	mov	r0, sl
 8001502:	f7fe fe65 	bl	80001d0 <memchr>
 8001506:	b138      	cbz	r0, 8001518 <_svfiprintf_r+0x150>
 8001508:	9b04      	ldr	r3, [sp, #16]
 800150a:	eba0 000a 	sub.w	r0, r0, sl
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	4082      	lsls	r2, r0
 8001512:	4313      	orrs	r3, r2
 8001514:	3401      	adds	r4, #1
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800151c:	4825      	ldr	r0, [pc, #148]	; (80015b4 <_svfiprintf_r+0x1ec>)
 800151e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001522:	2206      	movs	r2, #6
 8001524:	f7fe fe54 	bl	80001d0 <memchr>
 8001528:	2800      	cmp	r0, #0
 800152a:	d038      	beq.n	800159e <_svfiprintf_r+0x1d6>
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <_svfiprintf_r+0x1f0>)
 800152e:	bb1b      	cbnz	r3, 8001578 <_svfiprintf_r+0x1b0>
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	3307      	adds	r3, #7
 8001534:	f023 0307 	bic.w	r3, r3, #7
 8001538:	3308      	adds	r3, #8
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800153e:	4433      	add	r3, r6
 8001540:	9309      	str	r3, [sp, #36]	; 0x24
 8001542:	e768      	b.n	8001416 <_svfiprintf_r+0x4e>
 8001544:	fb0c 3202 	mla	r2, ip, r2, r3
 8001548:	460c      	mov	r4, r1
 800154a:	2001      	movs	r0, #1
 800154c:	e7a6      	b.n	800149c <_svfiprintf_r+0xd4>
 800154e:	2300      	movs	r3, #0
 8001550:	3401      	adds	r4, #1
 8001552:	9305      	str	r3, [sp, #20]
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0c0a 	mov.w	ip, #10
 800155a:	4620      	mov	r0, r4
 800155c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001560:	3a30      	subs	r2, #48	; 0x30
 8001562:	2a09      	cmp	r2, #9
 8001564:	d903      	bls.n	800156e <_svfiprintf_r+0x1a6>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0c6      	beq.n	80014f8 <_svfiprintf_r+0x130>
 800156a:	9105      	str	r1, [sp, #20]
 800156c:	e7c4      	b.n	80014f8 <_svfiprintf_r+0x130>
 800156e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001572:	4604      	mov	r4, r0
 8001574:	2301      	movs	r3, #1
 8001576:	e7f0      	b.n	800155a <_svfiprintf_r+0x192>
 8001578:	ab03      	add	r3, sp, #12
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	462a      	mov	r2, r5
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <_svfiprintf_r+0x1f4>)
 8001580:	a904      	add	r1, sp, #16
 8001582:	4638      	mov	r0, r7
 8001584:	f3af 8000 	nop.w
 8001588:	1c42      	adds	r2, r0, #1
 800158a:	4606      	mov	r6, r0
 800158c:	d1d6      	bne.n	800153c <_svfiprintf_r+0x174>
 800158e:	89ab      	ldrh	r3, [r5, #12]
 8001590:	065b      	lsls	r3, r3, #25
 8001592:	f53f af2d 	bmi.w	80013f0 <_svfiprintf_r+0x28>
 8001596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001598:	b01d      	add	sp, #116	; 0x74
 800159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800159e:	ab03      	add	r3, sp, #12
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	462a      	mov	r2, r5
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <_svfiprintf_r+0x1f4>)
 80015a6:	a904      	add	r1, sp, #16
 80015a8:	4638      	mov	r0, r7
 80015aa:	f000 f879 	bl	80016a0 <_printf_i>
 80015ae:	e7eb      	b.n	8001588 <_svfiprintf_r+0x1c0>
 80015b0:	08001a40 	.word	0x08001a40
 80015b4:	08001a4a 	.word	0x08001a4a
 80015b8:	00000000 	.word	0x00000000
 80015bc:	08001315 	.word	0x08001315
 80015c0:	08001a46 	.word	0x08001a46

080015c4 <_printf_common>:
 80015c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015c8:	4616      	mov	r6, r2
 80015ca:	4699      	mov	r9, r3
 80015cc:	688a      	ldr	r2, [r1, #8]
 80015ce:	690b      	ldr	r3, [r1, #16]
 80015d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bfb8      	it	lt
 80015d8:	4613      	movlt	r3, r2
 80015da:	6033      	str	r3, [r6, #0]
 80015dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015e0:	4607      	mov	r7, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	b10a      	cbz	r2, 80015ea <_printf_common+0x26>
 80015e6:	3301      	adds	r3, #1
 80015e8:	6033      	str	r3, [r6, #0]
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	0699      	lsls	r1, r3, #26
 80015ee:	bf42      	ittt	mi
 80015f0:	6833      	ldrmi	r3, [r6, #0]
 80015f2:	3302      	addmi	r3, #2
 80015f4:	6033      	strmi	r3, [r6, #0]
 80015f6:	6825      	ldr	r5, [r4, #0]
 80015f8:	f015 0506 	ands.w	r5, r5, #6
 80015fc:	d106      	bne.n	800160c <_printf_common+0x48>
 80015fe:	f104 0a19 	add.w	sl, r4, #25
 8001602:	68e3      	ldr	r3, [r4, #12]
 8001604:	6832      	ldr	r2, [r6, #0]
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	42ab      	cmp	r3, r5
 800160a:	dc26      	bgt.n	800165a <_printf_common+0x96>
 800160c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001610:	1e13      	subs	r3, r2, #0
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	bf18      	it	ne
 8001616:	2301      	movne	r3, #1
 8001618:	0692      	lsls	r2, r2, #26
 800161a:	d42b      	bmi.n	8001674 <_printf_common+0xb0>
 800161c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001620:	4649      	mov	r1, r9
 8001622:	4638      	mov	r0, r7
 8001624:	47c0      	blx	r8
 8001626:	3001      	adds	r0, #1
 8001628:	d01e      	beq.n	8001668 <_printf_common+0xa4>
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	6922      	ldr	r2, [r4, #16]
 800162e:	f003 0306 	and.w	r3, r3, #6
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf02      	ittt	eq
 8001636:	68e5      	ldreq	r5, [r4, #12]
 8001638:	6833      	ldreq	r3, [r6, #0]
 800163a:	1aed      	subeq	r5, r5, r3
 800163c:	68a3      	ldr	r3, [r4, #8]
 800163e:	bf0c      	ite	eq
 8001640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001644:	2500      	movne	r5, #0
 8001646:	4293      	cmp	r3, r2
 8001648:	bfc4      	itt	gt
 800164a:	1a9b      	subgt	r3, r3, r2
 800164c:	18ed      	addgt	r5, r5, r3
 800164e:	2600      	movs	r6, #0
 8001650:	341a      	adds	r4, #26
 8001652:	42b5      	cmp	r5, r6
 8001654:	d11a      	bne.n	800168c <_printf_common+0xc8>
 8001656:	2000      	movs	r0, #0
 8001658:	e008      	b.n	800166c <_printf_common+0xa8>
 800165a:	2301      	movs	r3, #1
 800165c:	4652      	mov	r2, sl
 800165e:	4649      	mov	r1, r9
 8001660:	4638      	mov	r0, r7
 8001662:	47c0      	blx	r8
 8001664:	3001      	adds	r0, #1
 8001666:	d103      	bne.n	8001670 <_printf_common+0xac>
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001670:	3501      	adds	r5, #1
 8001672:	e7c6      	b.n	8001602 <_printf_common+0x3e>
 8001674:	18e1      	adds	r1, r4, r3
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	2030      	movs	r0, #48	; 0x30
 800167a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800167e:	4422      	add	r2, r4
 8001680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001688:	3302      	adds	r3, #2
 800168a:	e7c7      	b.n	800161c <_printf_common+0x58>
 800168c:	2301      	movs	r3, #1
 800168e:	4622      	mov	r2, r4
 8001690:	4649      	mov	r1, r9
 8001692:	4638      	mov	r0, r7
 8001694:	47c0      	blx	r8
 8001696:	3001      	adds	r0, #1
 8001698:	d0e6      	beq.n	8001668 <_printf_common+0xa4>
 800169a:	3601      	adds	r6, #1
 800169c:	e7d9      	b.n	8001652 <_printf_common+0x8e>
	...

080016a0 <_printf_i>:
 80016a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016a4:	7e0f      	ldrb	r7, [r1, #24]
 80016a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016a8:	2f78      	cmp	r7, #120	; 0x78
 80016aa:	4691      	mov	r9, r2
 80016ac:	4680      	mov	r8, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	469a      	mov	sl, r3
 80016b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80016b6:	d807      	bhi.n	80016c8 <_printf_i+0x28>
 80016b8:	2f62      	cmp	r7, #98	; 0x62
 80016ba:	d80a      	bhi.n	80016d2 <_printf_i+0x32>
 80016bc:	2f00      	cmp	r7, #0
 80016be:	f000 80d4 	beq.w	800186a <_printf_i+0x1ca>
 80016c2:	2f58      	cmp	r7, #88	; 0x58
 80016c4:	f000 80c0 	beq.w	8001848 <_printf_i+0x1a8>
 80016c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016d0:	e03a      	b.n	8001748 <_printf_i+0xa8>
 80016d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016d6:	2b15      	cmp	r3, #21
 80016d8:	d8f6      	bhi.n	80016c8 <_printf_i+0x28>
 80016da:	a101      	add	r1, pc, #4	; (adr r1, 80016e0 <_printf_i+0x40>)
 80016dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016e0:	08001739 	.word	0x08001739
 80016e4:	0800174d 	.word	0x0800174d
 80016e8:	080016c9 	.word	0x080016c9
 80016ec:	080016c9 	.word	0x080016c9
 80016f0:	080016c9 	.word	0x080016c9
 80016f4:	080016c9 	.word	0x080016c9
 80016f8:	0800174d 	.word	0x0800174d
 80016fc:	080016c9 	.word	0x080016c9
 8001700:	080016c9 	.word	0x080016c9
 8001704:	080016c9 	.word	0x080016c9
 8001708:	080016c9 	.word	0x080016c9
 800170c:	08001851 	.word	0x08001851
 8001710:	08001779 	.word	0x08001779
 8001714:	0800180b 	.word	0x0800180b
 8001718:	080016c9 	.word	0x080016c9
 800171c:	080016c9 	.word	0x080016c9
 8001720:	08001873 	.word	0x08001873
 8001724:	080016c9 	.word	0x080016c9
 8001728:	08001779 	.word	0x08001779
 800172c:	080016c9 	.word	0x080016c9
 8001730:	080016c9 	.word	0x080016c9
 8001734:	08001813 	.word	0x08001813
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	602a      	str	r2, [r5, #0]
 8001740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001748:	2301      	movs	r3, #1
 800174a:	e09f      	b.n	800188c <_printf_i+0x1ec>
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	0607      	lsls	r7, r0, #24
 8001752:	f103 0104 	add.w	r1, r3, #4
 8001756:	6029      	str	r1, [r5, #0]
 8001758:	d501      	bpl.n	800175e <_printf_i+0xbe>
 800175a:	681e      	ldr	r6, [r3, #0]
 800175c:	e003      	b.n	8001766 <_printf_i+0xc6>
 800175e:	0646      	lsls	r6, r0, #25
 8001760:	d5fb      	bpl.n	800175a <_printf_i+0xba>
 8001762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001766:	2e00      	cmp	r6, #0
 8001768:	da03      	bge.n	8001772 <_printf_i+0xd2>
 800176a:	232d      	movs	r3, #45	; 0x2d
 800176c:	4276      	negs	r6, r6
 800176e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001772:	485a      	ldr	r0, [pc, #360]	; (80018dc <_printf_i+0x23c>)
 8001774:	230a      	movs	r3, #10
 8001776:	e012      	b.n	800179e <_printf_i+0xfe>
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	1d19      	adds	r1, r3, #4
 800177e:	6029      	str	r1, [r5, #0]
 8001780:	0605      	lsls	r5, r0, #24
 8001782:	d501      	bpl.n	8001788 <_printf_i+0xe8>
 8001784:	681e      	ldr	r6, [r3, #0]
 8001786:	e002      	b.n	800178e <_printf_i+0xee>
 8001788:	0641      	lsls	r1, r0, #25
 800178a:	d5fb      	bpl.n	8001784 <_printf_i+0xe4>
 800178c:	881e      	ldrh	r6, [r3, #0]
 800178e:	4853      	ldr	r0, [pc, #332]	; (80018dc <_printf_i+0x23c>)
 8001790:	2f6f      	cmp	r7, #111	; 0x6f
 8001792:	bf0c      	ite	eq
 8001794:	2308      	moveq	r3, #8
 8001796:	230a      	movne	r3, #10
 8001798:	2100      	movs	r1, #0
 800179a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800179e:	6865      	ldr	r5, [r4, #4]
 80017a0:	60a5      	str	r5, [r4, #8]
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	bfa2      	ittt	ge
 80017a6:	6821      	ldrge	r1, [r4, #0]
 80017a8:	f021 0104 	bicge.w	r1, r1, #4
 80017ac:	6021      	strge	r1, [r4, #0]
 80017ae:	b90e      	cbnz	r6, 80017b4 <_printf_i+0x114>
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	d04b      	beq.n	800184c <_printf_i+0x1ac>
 80017b4:	4615      	mov	r5, r2
 80017b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80017ba:	fb03 6711 	mls	r7, r3, r1, r6
 80017be:	5dc7      	ldrb	r7, [r0, r7]
 80017c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017c4:	4637      	mov	r7, r6
 80017c6:	42bb      	cmp	r3, r7
 80017c8:	460e      	mov	r6, r1
 80017ca:	d9f4      	bls.n	80017b6 <_printf_i+0x116>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d10b      	bne.n	80017e8 <_printf_i+0x148>
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	07de      	lsls	r6, r3, #31
 80017d4:	d508      	bpl.n	80017e8 <_printf_i+0x148>
 80017d6:	6923      	ldr	r3, [r4, #16]
 80017d8:	6861      	ldr	r1, [r4, #4]
 80017da:	4299      	cmp	r1, r3
 80017dc:	bfde      	ittt	le
 80017de:	2330      	movle	r3, #48	; 0x30
 80017e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017e8:	1b52      	subs	r2, r2, r5
 80017ea:	6122      	str	r2, [r4, #16]
 80017ec:	f8cd a000 	str.w	sl, [sp]
 80017f0:	464b      	mov	r3, r9
 80017f2:	aa03      	add	r2, sp, #12
 80017f4:	4621      	mov	r1, r4
 80017f6:	4640      	mov	r0, r8
 80017f8:	f7ff fee4 	bl	80015c4 <_printf_common>
 80017fc:	3001      	adds	r0, #1
 80017fe:	d14a      	bne.n	8001896 <_printf_i+0x1f6>
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	b004      	add	sp, #16
 8001806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	6023      	str	r3, [r4, #0]
 8001812:	4833      	ldr	r0, [pc, #204]	; (80018e0 <_printf_i+0x240>)
 8001814:	2778      	movs	r7, #120	; 0x78
 8001816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	6829      	ldr	r1, [r5, #0]
 800181e:	061f      	lsls	r7, r3, #24
 8001820:	f851 6b04 	ldr.w	r6, [r1], #4
 8001824:	d402      	bmi.n	800182c <_printf_i+0x18c>
 8001826:	065f      	lsls	r7, r3, #25
 8001828:	bf48      	it	mi
 800182a:	b2b6      	uxthmi	r6, r6
 800182c:	07df      	lsls	r7, r3, #31
 800182e:	bf48      	it	mi
 8001830:	f043 0320 	orrmi.w	r3, r3, #32
 8001834:	6029      	str	r1, [r5, #0]
 8001836:	bf48      	it	mi
 8001838:	6023      	strmi	r3, [r4, #0]
 800183a:	b91e      	cbnz	r6, 8001844 <_printf_i+0x1a4>
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	f023 0320 	bic.w	r3, r3, #32
 8001842:	6023      	str	r3, [r4, #0]
 8001844:	2310      	movs	r3, #16
 8001846:	e7a7      	b.n	8001798 <_printf_i+0xf8>
 8001848:	4824      	ldr	r0, [pc, #144]	; (80018dc <_printf_i+0x23c>)
 800184a:	e7e4      	b.n	8001816 <_printf_i+0x176>
 800184c:	4615      	mov	r5, r2
 800184e:	e7bd      	b.n	80017cc <_printf_i+0x12c>
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	6826      	ldr	r6, [r4, #0]
 8001854:	6961      	ldr	r1, [r4, #20]
 8001856:	1d18      	adds	r0, r3, #4
 8001858:	6028      	str	r0, [r5, #0]
 800185a:	0635      	lsls	r5, r6, #24
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	d501      	bpl.n	8001864 <_printf_i+0x1c4>
 8001860:	6019      	str	r1, [r3, #0]
 8001862:	e002      	b.n	800186a <_printf_i+0x1ca>
 8001864:	0670      	lsls	r0, r6, #25
 8001866:	d5fb      	bpl.n	8001860 <_printf_i+0x1c0>
 8001868:	8019      	strh	r1, [r3, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	6123      	str	r3, [r4, #16]
 800186e:	4615      	mov	r5, r2
 8001870:	e7bc      	b.n	80017ec <_printf_i+0x14c>
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	1d1a      	adds	r2, r3, #4
 8001876:	602a      	str	r2, [r5, #0]
 8001878:	681d      	ldr	r5, [r3, #0]
 800187a:	6862      	ldr	r2, [r4, #4]
 800187c:	2100      	movs	r1, #0
 800187e:	4628      	mov	r0, r5
 8001880:	f7fe fca6 	bl	80001d0 <memchr>
 8001884:	b108      	cbz	r0, 800188a <_printf_i+0x1ea>
 8001886:	1b40      	subs	r0, r0, r5
 8001888:	6060      	str	r0, [r4, #4]
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	6123      	str	r3, [r4, #16]
 800188e:	2300      	movs	r3, #0
 8001890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001894:	e7aa      	b.n	80017ec <_printf_i+0x14c>
 8001896:	6923      	ldr	r3, [r4, #16]
 8001898:	462a      	mov	r2, r5
 800189a:	4649      	mov	r1, r9
 800189c:	4640      	mov	r0, r8
 800189e:	47d0      	blx	sl
 80018a0:	3001      	adds	r0, #1
 80018a2:	d0ad      	beq.n	8001800 <_printf_i+0x160>
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	079b      	lsls	r3, r3, #30
 80018a8:	d413      	bmi.n	80018d2 <_printf_i+0x232>
 80018aa:	68e0      	ldr	r0, [r4, #12]
 80018ac:	9b03      	ldr	r3, [sp, #12]
 80018ae:	4298      	cmp	r0, r3
 80018b0:	bfb8      	it	lt
 80018b2:	4618      	movlt	r0, r3
 80018b4:	e7a6      	b.n	8001804 <_printf_i+0x164>
 80018b6:	2301      	movs	r3, #1
 80018b8:	4632      	mov	r2, r6
 80018ba:	4649      	mov	r1, r9
 80018bc:	4640      	mov	r0, r8
 80018be:	47d0      	blx	sl
 80018c0:	3001      	adds	r0, #1
 80018c2:	d09d      	beq.n	8001800 <_printf_i+0x160>
 80018c4:	3501      	adds	r5, #1
 80018c6:	68e3      	ldr	r3, [r4, #12]
 80018c8:	9903      	ldr	r1, [sp, #12]
 80018ca:	1a5b      	subs	r3, r3, r1
 80018cc:	42ab      	cmp	r3, r5
 80018ce:	dcf2      	bgt.n	80018b6 <_printf_i+0x216>
 80018d0:	e7eb      	b.n	80018aa <_printf_i+0x20a>
 80018d2:	2500      	movs	r5, #0
 80018d4:	f104 0619 	add.w	r6, r4, #25
 80018d8:	e7f5      	b.n	80018c6 <_printf_i+0x226>
 80018da:	bf00      	nop
 80018dc:	08001a51 	.word	0x08001a51
 80018e0:	08001a62 	.word	0x08001a62

080018e4 <memmove>:
 80018e4:	4288      	cmp	r0, r1
 80018e6:	b510      	push	{r4, lr}
 80018e8:	eb01 0402 	add.w	r4, r1, r2
 80018ec:	d902      	bls.n	80018f4 <memmove+0x10>
 80018ee:	4284      	cmp	r4, r0
 80018f0:	4623      	mov	r3, r4
 80018f2:	d807      	bhi.n	8001904 <memmove+0x20>
 80018f4:	1e43      	subs	r3, r0, #1
 80018f6:	42a1      	cmp	r1, r4
 80018f8:	d008      	beq.n	800190c <memmove+0x28>
 80018fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80018fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001902:	e7f8      	b.n	80018f6 <memmove+0x12>
 8001904:	4402      	add	r2, r0
 8001906:	4601      	mov	r1, r0
 8001908:	428a      	cmp	r2, r1
 800190a:	d100      	bne.n	800190e <memmove+0x2a>
 800190c:	bd10      	pop	{r4, pc}
 800190e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001916:	e7f7      	b.n	8001908 <memmove+0x24>

08001918 <_sbrk_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4d06      	ldr	r5, [pc, #24]	; (8001934 <_sbrk_r+0x1c>)
 800191c:	2300      	movs	r3, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	602b      	str	r3, [r5, #0]
 8001924:	f7ff f8b6 	bl	8000a94 <_sbrk>
 8001928:	1c43      	adds	r3, r0, #1
 800192a:	d102      	bne.n	8001932 <_sbrk_r+0x1a>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	b103      	cbz	r3, 8001932 <_sbrk_r+0x1a>
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	bd38      	pop	{r3, r4, r5, pc}
 8001934:	20000210 	.word	0x20000210

08001938 <memcpy>:
 8001938:	440a      	add	r2, r1
 800193a:	4291      	cmp	r1, r2
 800193c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001940:	d100      	bne.n	8001944 <memcpy+0xc>
 8001942:	4770      	bx	lr
 8001944:	b510      	push	{r4, lr}
 8001946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800194a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800194e:	4291      	cmp	r1, r2
 8001950:	d1f9      	bne.n	8001946 <memcpy+0xe>
 8001952:	bd10      	pop	{r4, pc}

08001954 <_realloc_r>:
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	4680      	mov	r8, r0
 800195a:	4614      	mov	r4, r2
 800195c:	460e      	mov	r6, r1
 800195e:	b921      	cbnz	r1, 800196a <_realloc_r+0x16>
 8001960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	4611      	mov	r1, r2
 8001966:	f7ff bc49 	b.w	80011fc <_malloc_r>
 800196a:	b92a      	cbnz	r2, 8001978 <_realloc_r+0x24>
 800196c:	f7ff fbda 	bl	8001124 <_free_r>
 8001970:	4625      	mov	r5, r4
 8001972:	4628      	mov	r0, r5
 8001974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001978:	f000 f81b 	bl	80019b2 <_malloc_usable_size_r>
 800197c:	4284      	cmp	r4, r0
 800197e:	4607      	mov	r7, r0
 8001980:	d802      	bhi.n	8001988 <_realloc_r+0x34>
 8001982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001986:	d812      	bhi.n	80019ae <_realloc_r+0x5a>
 8001988:	4621      	mov	r1, r4
 800198a:	4640      	mov	r0, r8
 800198c:	f7ff fc36 	bl	80011fc <_malloc_r>
 8001990:	4605      	mov	r5, r0
 8001992:	2800      	cmp	r0, #0
 8001994:	d0ed      	beq.n	8001972 <_realloc_r+0x1e>
 8001996:	42bc      	cmp	r4, r7
 8001998:	4622      	mov	r2, r4
 800199a:	4631      	mov	r1, r6
 800199c:	bf28      	it	cs
 800199e:	463a      	movcs	r2, r7
 80019a0:	f7ff ffca 	bl	8001938 <memcpy>
 80019a4:	4631      	mov	r1, r6
 80019a6:	4640      	mov	r0, r8
 80019a8:	f7ff fbbc 	bl	8001124 <_free_r>
 80019ac:	e7e1      	b.n	8001972 <_realloc_r+0x1e>
 80019ae:	4635      	mov	r5, r6
 80019b0:	e7df      	b.n	8001972 <_realloc_r+0x1e>

080019b2 <_malloc_usable_size_r>:
 80019b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019b6:	1f18      	subs	r0, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bfbc      	itt	lt
 80019bc:	580b      	ldrlt	r3, [r1, r0]
 80019be:	18c0      	addlt	r0, r0, r3
 80019c0:	4770      	bx	lr
	...

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
