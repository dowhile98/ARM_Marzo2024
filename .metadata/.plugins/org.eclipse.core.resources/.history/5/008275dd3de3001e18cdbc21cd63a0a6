/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/**
 * PD12: Led
 *
 * PA5->LED
 * PC13 -> Boton de usuario
 */
/*Includes -------------------------------------------------------------------*/
#include "stm32f4xx.h"
#include "hvac_ll_driver.h"
#include "delay.h"
#include "button.h"
#include <stdio.h>
#include "lcd.h"
/*Defines --------------------------------------------------------------------*/


/*Typedefs -------------------------------------------------------------------*/

/*Global variables -----------------------------------------------------------*/
Button_t sw1;
Button_t sw2;
/*Function prototype ---------------------------------------------------------*/
/**
 * 1: cuando el boton este presionado
 */
uint8_t readButton(uint8_t pin);


int main(void)
{
	/*Local variables --------------------------------------------------------*/
	/*
	 * base tiempo
	 * ticks = Fsysclk/freq
	 * ticks = 16E+6/1000
	 * ticks = 16000
	 */
	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock / 1000);
	NVIC_SetPriority(SysTick_IRQn, 15);
	/**
	 * hardware init
	 */
	hvac_io_init();
	/**
	 * button
	 */
	button_init(&sw1, readButton, getTicks, 20, 0);
	button_init(&sw2, readButton, getTicks, 15, 1);
	/* Loop forever */
	for(;;){
		if(button_on_press(&sw1)){
			printf("button on press");
		}
		else if(button_press_time_is_greater(&sw1, 3000, 1)){
			printf("button press time is upper to 3 sec.");
		}else if(button_on_release(&sw1)){
			printf("button on release");
		}

	}
}

/*Function definition --------------------------------------------------------*/
uint8_t readButton(uint8_t pin){
	uint8_t state = 0;
	switch(pin){
	case 0:
		state = GPIOX_IDR(SW1);				//pull down
		break;
	case 1:
		state = GPIOX_IDR(SW2) == 0 ? 1 : 0;//pulsador en pull up
		break;
	}
	return state;
}
int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
