
SysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001aa0  08001aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001b30  08001b30  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b30  08001b30  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002188  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a1e  00000000  00000000  0002225b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000210  00000000  00000000  00022c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000163  00000000  00000000  00022e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a63d  00000000  00000000  00022ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000385d  00000000  00000000  0003d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ed21  00000000  00000000  00040e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000dac  00000000  00000000  000cfbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000d095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001a88 	.word	0x08001a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08001a88 	.word	0x08001a88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <button_init>:
 */
#include "button.h"
/**
 *
 */
void button_init(Button_t *b, read_fc r, ticks_fc t, uint32_t db, uint16_t pin){
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	b->debounceMs = db;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	61da      	str	r2, [r3, #28]
	b->read = r;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	605a      	str	r2, [r3, #4]
	b->ticks = t;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]
	b->old_state = 0;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2200      	movs	r2, #0
 8000294:	741a      	strb	r2, [r3, #16]
	b->pressTime = 0;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
	b->flags = 0;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2200      	movs	r2, #0
 80002a0:	761a      	strb	r2, [r3, #24]
	b->pin = pin;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	8b3a      	ldrh	r2, [r7, #24]
 80002a6:	801a      	strh	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <button_update>:
/**
 *
 */
void button_update(Button_t *b){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	read_fc read;
	ticks_fc bt_getTcks;
	if(b->read == NULL || b->ticks == NULL){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	f000 808a 	beq.w	80003da <button_update+0x126>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f000 8085 	beq.w	80003da <button_update+0x126>
		return;
	}
	read = b->read;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	617b      	str	r3, [r7, #20]
	bt_getTcks = b->ticks;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	613b      	str	r3, [r7, #16]

	uint8_t new_state = read(b->pin);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	4610      	mov	r0, r2
 80002e6:	4798      	blx	r3
 80002e8:	4603      	mov	r3, r0
 80002ea:	73fb      	strb	r3, [r7, #15]
	/*state verify*/
	if(new_state != b->old_state){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7c1b      	ldrb	r3, [r3, #16]
 80002f0:	7bfa      	ldrb	r2, [r7, #15]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d005      	beq.n	8000302 <button_update+0x4e>
		b->time_state_change = bt_getTcks();
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	4798      	blx	r3
 80002fa:	4602      	mov	r2, r0
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	615a      	str	r2, [r3, #20]
 8000300:	e067      	b.n	80003d2 <button_update+0x11e>
	}
	else if(new_state){
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d048      	beq.n	800039a <button_update+0xe6>
		if(!(b->flags & ONPRESS_SENT)){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7e1b      	ldrb	r3, [r3, #24]
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d128      	bne.n	8000366 <button_update+0xb2>
			//debounce
			if((bt_getTcks() - b->time_state_change)>= b->debounceMs){
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	4798      	blx	r3
 8000318:	4602      	mov	r2, r0
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	69db      	ldr	r3, [r3, #28]
 8000324:	429a      	cmp	r2, r3
 8000326:	d354      	bcc.n	80003d2 <button_update+0x11e>
				b->flags &=~ ONRELEASE_SENT;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	7e1b      	ldrb	r3, [r3, #24]
 800032c:	f023 0302 	bic.w	r3, r3, #2
 8000330:	b2da      	uxtb	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	761a      	strb	r2, [r3, #24]
				b->flags |= ONPRESS_SENT | ONPRESS_EVT;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	7e1b      	ldrb	r3, [r3, #24]
 800033a:	f043 0309 	orr.w	r3, r3, #9
 800033e:	b2da      	uxtb	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	761a      	strb	r2, [r3, #24]
				//
				b->keepalive.cnt = 0;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	849a      	strh	r2, [r3, #36]	; 0x24
				b->keepalive.last_time = bt_getTcks();
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	4798      	blx	r3
 800034e:	4602      	mov	r2, r0
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	621a      	str	r2, [r3, #32]

				b->time_state_change = bt_getTcks();
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	4798      	blx	r3
 8000358:	4602      	mov	r2, r0
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	615a      	str	r2, [r3, #20]
				b->pressTime = 0;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	e035      	b.n	80003d2 <button_update+0x11e>
			}
		}else{
			if((bt_getTcks() - b->keepalive.last_time)>= KEEP_ALIVE_PERIOD){
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	4798      	blx	r3
 800036a:	4602      	mov	r2, r0
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	2b63      	cmp	r3, #99	; 0x63
 8000374:	d92d      	bls.n	80003d2 <button_update+0x11e>
				b->keepalive.last_time = bt_getTcks();
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	4798      	blx	r3
 800037a:	4602      	mov	r2, r0
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	621a      	str	r2, [r3, #32]
				b->keepalive.cnt += 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000384:	3301      	adds	r3, #1
 8000386:	b29a      	uxth	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	849a      	strh	r2, [r3, #36]	; 0x24
				b->pressTime += KEEP_ALIVE_PERIOD;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	e01b      	b.n	80003d2 <button_update+0x11e>
			}
		}
	}else{
		if(b->flags & ONPRESS_SENT){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	7e1b      	ldrb	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d015      	beq.n	80003d2 <button_update+0x11e>
			b->pressTime = 0;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
			b->flags &=~ (ONPRESS_SENT | ONPRESS_EVT | BUTTON_TIME_ONCE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	7e1b      	ldrb	r3, [r3, #24]
 80003b0:	f023 0319 	bic.w	r3, r3, #25
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	761a      	strb	r2, [r3, #24]
			b->flags |= ONRELEASE_SENT;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	7e1b      	ldrb	r3, [r3, #24]
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	761a      	strb	r2, [r3, #24]
			b->time_state_change = bt_getTcks();
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	4798      	blx	r3
 80003cc:	4602      	mov	r2, r0
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	615a      	str	r2, [r3, #20]
		}
	}
	b->old_state = new_state;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7bfa      	ldrb	r2, [r7, #15]
 80003d6:	741a      	strb	r2, [r3, #16]
	return;
 80003d8:	e000      	b.n	80003dc <button_update+0x128>
		return;
 80003da:	bf00      	nop
}
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <button_on_press>:
/**
 *
 */
bool button_on_press(Button_t *b){
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
	if(b->flags & ONPRESS_EVT){
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7e1b      	ldrb	r3, [r3, #24]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <button_on_press+0x26>
		b->flags &=~ ONPRESS_EVT;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7e1b      	ldrb	r3, [r3, #24]
 80003fa:	f023 0308 	bic.w	r3, r3, #8
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	761a      	strb	r2, [r3, #24]
		return true;
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <button_on_press+0x28>
	}
	return false;
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <button_on_release>:

/**
 *
 */
bool button_on_release(Button_t *b){
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	if(b->flags & ONRELEASE_SENT){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7e1b      	ldrb	r3, [r3, #24]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	d008      	beq.n	800043c <button_on_release+0x26>
		b->flags &=~ ONRELEASE_SENT;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7e1b      	ldrb	r3, [r3, #24]
 800042e:	f023 0302 	bic.w	r3, r3, #2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	761a      	strb	r2, [r3, #24]
		return true;
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <button_on_release+0x28>
	}
	return false;
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <button_press_time_is_greater>:
/**
 *
 */
bool button_press_time_is_greater(Button_t *b, uint32_t ms, bool once){
 800044a:	b480      	push	{r7}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	4613      	mov	r3, r2
 8000456:	71fb      	strb	r3, [r7, #7]
	if(once == true){
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d013      	beq.n	8000486 <button_press_time_is_greater+0x3c>
		if((b->pressTime >= ms) &&(!(b->flags & BUTTON_TIME_ONCE))){
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	429a      	cmp	r2, r3
 8000466:	d815      	bhi.n	8000494 <button_press_time_is_greater+0x4a>
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	7e1b      	ldrb	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10f      	bne.n	8000494 <button_press_time_is_greater+0x4a>
			b->flags |= BUTTON_TIME_ONCE;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	7e1b      	ldrb	r3, [r3, #24]
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	b2da      	uxtb	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	761a      	strb	r2, [r3, #24]
			return true;
 8000482:	2301      	movs	r3, #1
 8000484:	e007      	b.n	8000496 <button_press_time_is_greater+0x4c>
		}
	}else{
		if(b->pressTime >= ms){
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	429a      	cmp	r2, r3
 800048e:	d801      	bhi.n	8000494 <button_press_time_is_greater+0x4a>
			return true;
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <button_press_time_is_greater+0x4c>
		}
	}
	return false;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <getTicks>:
	return;
}
/**
 * @brief
 */
uint32_t getTicks(void){
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	return uwTicks;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <getTicks+0x14>)
 80004aa:	681b      	ldr	r3, [r3, #0]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	2000007c 	.word	0x2000007c

080004bc <ticksUpdate>:

/**
 * @brief
 */
void ticksUpdate(uint32_t ms){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uwTicks += ms;
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <ticksUpdate+0x20>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <ticksUpdate+0x20>)
 80004ce:	6013      	str	r3, [r2, #0]
	return;
 80004d0:	bf00      	nop
}
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	2000007c 	.word	0x2000007c

080004e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	db0a      	blt.n	800050a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	490c      	ldr	r1, [pc, #48]	; (800052c <__NVIC_SetPriority+0x4c>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	0112      	lsls	r2, r2, #4
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	440b      	add	r3, r1
 8000504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000508:	e00a      	b.n	8000520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4908      	ldr	r1, [pc, #32]	; (8000530 <__NVIC_SetPriority+0x50>)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	3b04      	subs	r3, #4
 8000518:	0112      	lsls	r2, r2, #4
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	440b      	add	r3, r1
 800051e:	761a      	strb	r2, [r3, #24]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3b01      	subs	r3, #1
 8000540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000544:	d301      	bcc.n	800054a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000546:	2301      	movs	r3, #1
 8000548:	e00f      	b.n	800056a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <SysTick_Config+0x40>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3b01      	subs	r3, #1
 8000550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000552:	210f      	movs	r1, #15
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f7ff ffc2 	bl	80004e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <SysTick_Config+0x40>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <SysTick_Config+0x40>)
 8000564:	2207      	movs	r2, #7
 8000566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	e000e010 	.word	0xe000e010

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <main>:
 */
uint8_t readButton(uint8_t pin);


int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af02      	add	r7, sp, #8
	 * base tiempo
	 * ticks = Fsysclk/freq
	 * ticks = 16E+6/1000
	 * ticks = 16000
	 */
	SystemCoreClockUpdate();
 80005ce:	f000 f94b 	bl	8000868 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <main+0x84>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <main+0x88>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	099b      	lsrs	r3, r3, #6
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa8 	bl	8000534 <SysTick_Config>
	/**
	 * hardware init
	 */
	hvac_io_init();
 80005e4:	f000 f9ea 	bl	80009bc <hvac_io_init>
	/**
	 * button
	 */
	button_init(&sw1, readButton, getTicks, 20, 0);
 80005e8:	2300      	movs	r3, #0
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2314      	movs	r3, #20
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <main+0x8c>)
 80005f0:	4919      	ldr	r1, [pc, #100]	; (8000658 <main+0x90>)
 80005f2:	481a      	ldr	r0, [pc, #104]	; (800065c <main+0x94>)
 80005f4:	f7ff fe3c 	bl	8000270 <button_init>
	button_init(&sw2, readButton, getTicks, 15, 1);
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	230f      	movs	r3, #15
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <main+0x8c>)
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <main+0x90>)
 8000602:	4817      	ldr	r0, [pc, #92]	; (8000660 <main+0x98>)
 8000604:	f7ff fe34 	bl	8000270 <button_init>
	/* Loop forever */
	for(;;){
		if(button_on_press(&sw1)){
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0x94>)
 800060a:	f7ff feea 	bl	80003e2 <button_on_press>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <main+0x54>
			printf("button on press");
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <main+0x9c>)
 8000616:	f000 fbc1 	bl	8000d9c <iprintf>
 800061a:	e7f5      	b.n	8000608 <main+0x40>
		}
		else if(button_press_time_is_greater(&sw1, 3000, 1)){
 800061c:	2201      	movs	r2, #1
 800061e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x94>)
 8000624:	f7ff ff11 	bl	800044a <button_press_time_is_greater>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <main+0x6e>
			printf("button press time is upper to 3 sec.");
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <main+0xa0>)
 8000630:	f000 fbb4 	bl	8000d9c <iprintf>
 8000634:	e7e8      	b.n	8000608 <main+0x40>
		}else if(button_on_release(&sw1)){
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x94>)
 8000638:	f7ff feed 	bl	8000416 <button_on_release>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0e2      	beq.n	8000608 <main+0x40>
			printf("button on release");
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0xa4>)
 8000644:	f000 fbaa 	bl	8000d9c <iprintf>
		if(button_on_press(&sw1)){
 8000648:	e7de      	b.n	8000608 <main+0x40>
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	10624dd3 	.word	0x10624dd3
 8000654:	080004a5 	.word	0x080004a5
 8000658:	08000671 	.word	0x08000671
 800065c:	20000080 	.word	0x20000080
 8000660:	200000a8 	.word	0x200000a8
 8000664:	08001aa0 	.word	0x08001aa0
 8000668:	08001ab0 	.word	0x08001ab0
 800066c:	08001ad8 	.word	0x08001ad8

08000670 <readButton>:

	}
}

/*Function definition --------------------------------------------------------*/
uint8_t readButton(uint8_t pin){
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	uint8_t state = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
	switch(pin){
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <readButton+0x1a>
 8000684:	2b01      	cmp	r3, #1
 8000686:	d004      	beq.n	8000692 <readButton+0x22>
 8000688:	e00c      	b.n	80006a4 <readButton+0x34>
	case 0:
		state = GPIOX_IDR(SW1);				//pull down
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <readButton+0x44>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	73fb      	strb	r3, [r7, #15]
		break;
 8000690:	e008      	b.n	80006a4 <readButton+0x34>
	case 1:
		state = GPIOX_IDR(SW2) == 0 ? 1 : 0;//pulsador en pull up
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <readButton+0x48>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	73fb      	strb	r3, [r7, #15]
		break;
 80006a2:	bf00      	nop
	}
	return state;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	42400200 	.word	0x42400200
 80006b8:	42400204 	.word	0x42400204

080006bc <__io_putchar>:
int __io_putchar(int ch){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff56 	bl	8000578 <ITM_SendChar>
	return ch;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <SysTick_Handler>:
#include "button.h"

extern Button_t sw1;
extern Button_t sw2;

void SysTick_Handler(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/**
	 *
	 */
	ticksUpdate(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff feed 	bl	80004bc <ticksUpdate>
	button_update(&sw1);
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <SysTick_Handler+0x1c>)
 80006e4:	f7ff fde6 	bl	80002b4 <button_update>
	button_update(&sw2);
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <SysTick_Handler+0x20>)
 80006ea:	f7ff fde3 	bl	80002b4 <button_update>
	return;
 80006ee:	bf00      	nop
}
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000080 	.word	0x20000080
 80006f8:	200000a8 	.word	0x200000a8

080006fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e00a      	b.n	8000724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070e:	f3af 8000 	nop.w
 8000712:	4601      	mov	r1, r0
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	b2ca      	uxtb	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	dbf0      	blt.n	800070e <_read+0x12>
  }

  return len;
 800072c:	687b      	ldr	r3, [r7, #4]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e009      	b.n	800075c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffb3 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	dbf1      	blt.n	8000748 <_write+0x12>
  }
  return len;
 8000764:	687b      	ldr	r3, [r7, #4]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_close>:

int _close(int file)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000796:	605a      	str	r2, [r3, #4]
  return 0;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <_isatty>:

int _isatty(int file)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f000 fb6c 	bl	8000ee4 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20020000 	.word	0x20020000
 8000838:	00000400 	.word	0x00000400
 800083c:	200000d0 	.word	0x200000d0
 8000840:	20000220 	.word	0x20000220

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	2302      	movs	r3, #2
 8000880:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <SystemCoreClockUpdate+0xec>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	f003 030c 	and.w	r3, r3, #12
 800088a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b08      	cmp	r3, #8
 8000890:	d011      	beq.n	80008b6 <SystemCoreClockUpdate+0x4e>
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2b08      	cmp	r3, #8
 8000896:	d844      	bhi.n	8000922 <SystemCoreClockUpdate+0xba>
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <SystemCoreClockUpdate+0x3e>
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d004      	beq.n	80008ae <SystemCoreClockUpdate+0x46>
 80008a4:	e03d      	b.n	8000922 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <SystemCoreClockUpdate+0xf4>)
 80008aa:	601a      	str	r2, [r3, #0]
      break;
 80008ac:	e03d      	b.n	800092a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <SystemCoreClockUpdate+0xf8>)
 80008b2:	601a      	str	r2, [r3, #0]
      break;
 80008b4:	e039      	b.n	800092a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <SystemCoreClockUpdate+0xec>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	0d9b      	lsrs	r3, r3, #22
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <SystemCoreClockUpdate+0xec>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008ca:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00c      	beq.n	80008ec <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <SystemCoreClockUpdate+0xf8>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <SystemCoreClockUpdate+0xec>)
 80008dc:	6852      	ldr	r2, [r2, #4]
 80008de:	0992      	lsrs	r2, r2, #6
 80008e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e00b      	b.n	8000904 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <SystemCoreClockUpdate+0xf4>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <SystemCoreClockUpdate+0xec>)
 80008f6:	6852      	ldr	r2, [r2, #4]
 80008f8:	0992      	lsrs	r2, r2, #6
 80008fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <SystemCoreClockUpdate+0xec>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	0c1b      	lsrs	r3, r3, #16
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	3301      	adds	r3, #1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 800091e:	6013      	str	r3, [r2, #0]
      break;
 8000920:	e003      	b.n	800092a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <SystemCoreClockUpdate+0xf4>)
 8000926:	601a      	str	r2, [r3, #0]
      break;
 8000928:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <SystemCoreClockUpdate+0xec>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <SystemCoreClockUpdate+0xfc>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	fa22 f303 	lsr.w	r3, r2, r3
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <SystemCoreClockUpdate+0xf0>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	371c      	adds	r7, #28
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800
 8000958:	20000000 	.word	0x20000000
 800095c:	00f42400 	.word	0x00f42400
 8000960:	007a1200 	.word	0x007a1200
 8000964:	08001aec 	.word	0x08001aec

08000968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800096c:	f7ff ff6a 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	; (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	; (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000996:	f000 faab 	bl	8000ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fe15 	bl	80005c8 <main>

0800099e <LoopForever>:

LoopForever:
  b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   r0, =_estack
 80009a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009ac:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 80009b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009b4:	20000220 	.word	0x20000220

080009b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <hvac_io_init>:
 */

#include "hvac_ll_driver.h"


void hvac_io_init(void){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	/**
	 * SW1
	 */
	GPIOX_CLK_EN(SW1); GPIOX_CLK_EN(SW2);
 80009c0:	4b91      	ldr	r3, [pc, #580]	; (8000c08 <hvac_io_init+0x24c>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a90      	ldr	r2, [pc, #576]	; (8000c08 <hvac_io_init+0x24c>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b8e      	ldr	r3, [pc, #568]	; (8000c08 <hvac_io_init+0x24c>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a8d      	ldr	r2, [pc, #564]	; (8000c08 <hvac_io_init+0x24c>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(SW1, 0);
 80009d8:	4b8c      	ldr	r3, [pc, #560]	; (8000c0c <hvac_io_init+0x250>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a8b      	ldr	r2, [pc, #556]	; (8000c0c <hvac_io_init+0x250>)
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	4b89      	ldr	r3, [pc, #548]	; (8000c0c <hvac_io_init+0x250>)
 80009e6:	4a89      	ldr	r2, [pc, #548]	; (8000c0c <hvac_io_init+0x250>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(SW2, 0);
 80009ec:	4b87      	ldr	r3, [pc, #540]	; (8000c0c <hvac_io_init+0x250>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a86      	ldr	r2, [pc, #536]	; (8000c0c <hvac_io_init+0x250>)
 80009f2:	f023 030f 	bic.w	r3, r3, #15
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b84      	ldr	r3, [pc, #528]	; (8000c0c <hvac_io_init+0x250>)
 80009fa:	4a84      	ldr	r2, [pc, #528]	; (8000c0c <hvac_io_init+0x250>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6013      	str	r3, [r2, #0]
	//GPIOX_PUPDR(SW1, 1);
	GPIOX_PUPDR(SW2, 1);
 8000a00:	4b82      	ldr	r3, [pc, #520]	; (8000c0c <hvac_io_init+0x250>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a81      	ldr	r2, [pc, #516]	; (8000c0c <hvac_io_init+0x250>)
 8000a06:	f023 030f 	bic.w	r3, r3, #15
 8000a0a:	60d3      	str	r3, [r2, #12]
 8000a0c:	4b7f      	ldr	r3, [pc, #508]	; (8000c0c <hvac_io_init+0x250>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4a7e      	ldr	r2, [pc, #504]	; (8000c0c <hvac_io_init+0x250>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	60d3      	str	r3, [r2, #12]
	/**
	 * Contactos
	 */
	GPIOX_CLK_EN(CONTACT1); GPIOX_CLK_EN(CONTACT2);
 8000a18:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <hvac_io_init+0x24c>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a7a      	ldr	r2, [pc, #488]	; (8000c08 <hvac_io_init+0x24c>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b78      	ldr	r3, [pc, #480]	; (8000c08 <hvac_io_init+0x24c>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <hvac_io_init+0x24c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(CONTACT1, 0);
 8000a30:	4b76      	ldr	r3, [pc, #472]	; (8000c0c <hvac_io_init+0x250>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a75      	ldr	r2, [pc, #468]	; (8000c0c <hvac_io_init+0x250>)
 8000a36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b73      	ldr	r3, [pc, #460]	; (8000c0c <hvac_io_init+0x250>)
 8000a3e:	4a73      	ldr	r2, [pc, #460]	; (8000c0c <hvac_io_init+0x250>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(CONTACT2, 0);
 8000a44:	4b71      	ldr	r3, [pc, #452]	; (8000c0c <hvac_io_init+0x250>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a70      	ldr	r2, [pc, #448]	; (8000c0c <hvac_io_init+0x250>)
 8000a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b6e      	ldr	r3, [pc, #440]	; (8000c0c <hvac_io_init+0x250>)
 8000a52:	4a6e      	ldr	r2, [pc, #440]	; (8000c0c <hvac_io_init+0x250>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(CONTACT1, 2);
 8000a58:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <hvac_io_init+0x250>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4a6b      	ldr	r2, [pc, #428]	; (8000c0c <hvac_io_init+0x250>)
 8000a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a62:	60d3      	str	r3, [r2, #12]
 8000a64:	4b69      	ldr	r3, [pc, #420]	; (8000c0c <hvac_io_init+0x250>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	4a68      	ldr	r2, [pc, #416]	; (8000c0c <hvac_io_init+0x250>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(CONTACT2, 2);
 8000a70:	4b66      	ldr	r3, [pc, #408]	; (8000c0c <hvac_io_init+0x250>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	4a65      	ldr	r2, [pc, #404]	; (8000c0c <hvac_io_init+0x250>)
 8000a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a7a:	60d3      	str	r3, [r2, #12]
 8000a7c:	4b63      	ldr	r3, [pc, #396]	; (8000c0c <hvac_io_init+0x250>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a62      	ldr	r2, [pc, #392]	; (8000c0c <hvac_io_init+0x250>)
 8000a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a86:	60d3      	str	r3, [r2, #12]
	/**
	 * Relay
	 */
	GPIOX_CLK_EN(RELAY1);GPIOX_CLK_EN(RELAY2);
 8000a88:	4b5f      	ldr	r3, [pc, #380]	; (8000c08 <hvac_io_init+0x24c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a5e      	ldr	r2, [pc, #376]	; (8000c08 <hvac_io_init+0x24c>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b5c      	ldr	r3, [pc, #368]	; (8000c08 <hvac_io_init+0x24c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a5b      	ldr	r2, [pc, #364]	; (8000c08 <hvac_io_init+0x24c>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(RELAY1, 0x1);
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <hvac_io_init+0x254>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a5a      	ldr	r2, [pc, #360]	; (8000c10 <hvac_io_init+0x254>)
 8000aa6:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <hvac_io_init+0x254>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a57      	ldr	r2, [pc, #348]	; (8000c10 <hvac_io_init+0x254>)
 8000ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(RELAY2, 0x1);
 8000ab8:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <hvac_io_init+0x254>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a54      	ldr	r2, [pc, #336]	; (8000c10 <hvac_io_init+0x254>)
 8000abe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <hvac_io_init+0x254>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <hvac_io_init+0x254>)
 8000aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ace:	6013      	str	r3, [r2, #0]
	/**
	 * LCD
	 */
	GPIOX_CLK_EN(LCD_RS); GPIOX_CLK_EN(LCD_EN);
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <hvac_io_init+0x24c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a4c      	ldr	r2, [pc, #304]	; (8000c08 <hvac_io_init+0x24c>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <hvac_io_init+0x24c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <hvac_io_init+0x24c>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_CLK_EN(LCD_D4); GPIOX_CLK_EN(LCD_D5);
 8000ae8:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <hvac_io_init+0x24c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <hvac_io_init+0x24c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <hvac_io_init+0x24c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a43      	ldr	r2, [pc, #268]	; (8000c08 <hvac_io_init+0x24c>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_CLK_EN(LCD_D6); GPIOX_CLK_EN(LCD_D7);
 8000b00:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <hvac_io_init+0x24c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <hvac_io_init+0x24c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <hvac_io_init+0x24c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <hvac_io_init+0x24c>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOX_MODER(LCD_RS, 0x1); GPIOX_MODER(LCD_EN, 1);
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <hvac_io_init+0x258>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a3d      	ldr	r2, [pc, #244]	; (8000c14 <hvac_io_init+0x258>)
 8000b1e:	f023 0303 	bic.w	r3, r3, #3
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <hvac_io_init+0x258>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <hvac_io_init+0x258>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <hvac_io_init+0x250>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a35      	ldr	r2, [pc, #212]	; (8000c0c <hvac_io_init+0x250>)
 8000b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b3a:	f023 0303 	bic.w	r3, r3, #3
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <hvac_io_init+0x250>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <hvac_io_init+0x250>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(LCD_D4, 0x1); GPIOX_MODER(LCD_D5, 1);
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <hvac_io_init+0x250>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <hvac_io_init+0x250>)
 8000b52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b56:	f023 030f 	bic.w	r3, r3, #15
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <hvac_io_init+0x250>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a2a      	ldr	r2, [pc, #168]	; (8000c0c <hvac_io_init+0x250>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <hvac_io_init+0x250>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <hvac_io_init+0x250>)
 8000b6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <hvac_io_init+0x250>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <hvac_io_init+0x250>)
 8000b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b82:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(LCD_D6, 0x1); GPIOX_MODER(LCD_D7, 1);
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <hvac_io_init+0x250>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <hvac_io_init+0x250>)
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	041b      	lsls	r3, r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <hvac_io_init+0x250>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <hvac_io_init+0x250>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <hvac_io_init+0x250>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <hvac_io_init+0x250>)
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	049b      	lsls	r3, r3, #18
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <hvac_io_init+0x250>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <hvac_io_init+0x250>)
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
	/**
	 * STATUS
	 */
	GPIOX_CLK_EN(STATUS);
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <hvac_io_init+0x24c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <hvac_io_init+0x24c>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(STATUS, 1);
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <hvac_io_init+0x254>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <hvac_io_init+0x254>)
 8000bc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <hvac_io_init+0x254>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <hvac_io_init+0x254>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6013      	str	r3, [r2, #0]
	/**
	 * Alarma de contacto
	 */
	GPIOX_CLK_EN(A_CONTACT);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <hvac_io_init+0x24c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <hvac_io_init+0x24c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(A_CONTACT, 1);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <hvac_io_init+0x258>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <hvac_io_init+0x258>)
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <hvac_io_init+0x258>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <hvac_io_init+0x258>)
 8000bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfa:	6013      	str	r3, [r2, #0]

	return;
 8000bfc:	bf00      	nop
}
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	40020400 	.word	0x40020400

08000c18 <std>:
 8000c18:	2300      	movs	r3, #0
 8000c1a:	b510      	push	{r4, lr}
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c26:	6083      	str	r3, [r0, #8]
 8000c28:	8181      	strh	r1, [r0, #12]
 8000c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c2c:	81c2      	strh	r2, [r0, #14]
 8000c2e:	6183      	str	r3, [r0, #24]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2208      	movs	r2, #8
 8000c34:	305c      	adds	r0, #92	; 0x5c
 8000c36:	f000 f906 	bl	8000e46 <memset>
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <std+0x58>)
 8000c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <std+0x5c>)
 8000c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <std+0x60>)
 8000c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <std+0x64>)
 8000c48:	6323      	str	r3, [r4, #48]	; 0x30
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <std+0x68>)
 8000c4c:	6224      	str	r4, [r4, #32]
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	d006      	beq.n	8000c60 <std+0x48>
 8000c52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000c56:	4294      	cmp	r4, r2
 8000c58:	d002      	beq.n	8000c60 <std+0x48>
 8000c5a:	33d0      	adds	r3, #208	; 0xd0
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d105      	bne.n	8000c6c <std+0x54>
 8000c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c68:	f000 b966 	b.w	8000f38 <__retarget_lock_init_recursive>
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	bf00      	nop
 8000c70:	08000dc1 	.word	0x08000dc1
 8000c74:	08000de3 	.word	0x08000de3
 8000c78:	08000e1b 	.word	0x08000e1b
 8000c7c:	08000e3f 	.word	0x08000e3f
 8000c80:	200000d4 	.word	0x200000d4

08000c84 <stdio_exit_handler>:
 8000c84:	4a02      	ldr	r2, [pc, #8]	; (8000c90 <stdio_exit_handler+0xc>)
 8000c86:	4903      	ldr	r1, [pc, #12]	; (8000c94 <stdio_exit_handler+0x10>)
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <stdio_exit_handler+0x14>)
 8000c8a:	f000 b869 	b.w	8000d60 <_fwalk_sglue>
 8000c8e:	bf00      	nop
 8000c90:	20000004 	.word	0x20000004
 8000c94:	080017e5 	.word	0x080017e5
 8000c98:	20000010 	.word	0x20000010

08000c9c <cleanup_stdio>:
 8000c9c:	6841      	ldr	r1, [r0, #4]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <cleanup_stdio+0x34>)
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	b510      	push	{r4, lr}
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	d001      	beq.n	8000cac <cleanup_stdio+0x10>
 8000ca8:	f000 fd9c 	bl	80017e4 <_fflush_r>
 8000cac:	68a1      	ldr	r1, [r4, #8]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <cleanup_stdio+0x38>)
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d002      	beq.n	8000cba <cleanup_stdio+0x1e>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 fd95 	bl	80017e4 <_fflush_r>
 8000cba:	68e1      	ldr	r1, [r4, #12]
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <cleanup_stdio+0x3c>)
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d004      	beq.n	8000ccc <cleanup_stdio+0x30>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cc8:	f000 bd8c 	b.w	80017e4 <_fflush_r>
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000d4 	.word	0x200000d4
 8000cd4:	2000013c 	.word	0x2000013c
 8000cd8:	200001a4 	.word	0x200001a4

08000cdc <global_stdio_init.part.0>:
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <global_stdio_init.part.0+0x30>)
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <global_stdio_init.part.0+0x34>)
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <global_stdio_init.part.0+0x38>)
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	f7ff ff94 	bl	8000c18 <std>
 8000cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2109      	movs	r1, #9
 8000cf8:	f7ff ff8e 	bl	8000c18 <std>
 8000cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000d00:	2202      	movs	r2, #2
 8000d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d06:	2112      	movs	r1, #18
 8000d08:	f7ff bf86 	b.w	8000c18 <std>
 8000d0c:	2000020c 	.word	0x2000020c
 8000d10:	200000d4 	.word	0x200000d4
 8000d14:	08000c85 	.word	0x08000c85

08000d18 <__sfp_lock_acquire>:
 8000d18:	4801      	ldr	r0, [pc, #4]	; (8000d20 <__sfp_lock_acquire+0x8>)
 8000d1a:	f000 b90e 	b.w	8000f3a <__retarget_lock_acquire_recursive>
 8000d1e:	bf00      	nop
 8000d20:	20000215 	.word	0x20000215

08000d24 <__sfp_lock_release>:
 8000d24:	4801      	ldr	r0, [pc, #4]	; (8000d2c <__sfp_lock_release+0x8>)
 8000d26:	f000 b909 	b.w	8000f3c <__retarget_lock_release_recursive>
 8000d2a:	bf00      	nop
 8000d2c:	20000215 	.word	0x20000215

08000d30 <__sinit>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fff0 	bl	8000d18 <__sfp_lock_acquire>
 8000d38:	6a23      	ldr	r3, [r4, #32]
 8000d3a:	b11b      	cbz	r3, 8000d44 <__sinit+0x14>
 8000d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d40:	f7ff bff0 	b.w	8000d24 <__sfp_lock_release>
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__sinit+0x28>)
 8000d46:	6223      	str	r3, [r4, #32]
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__sinit+0x2c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f5      	bne.n	8000d3c <__sinit+0xc>
 8000d50:	f7ff ffc4 	bl	8000cdc <global_stdio_init.part.0>
 8000d54:	e7f2      	b.n	8000d3c <__sinit+0xc>
 8000d56:	bf00      	nop
 8000d58:	08000c9d 	.word	0x08000c9d
 8000d5c:	2000020c 	.word	0x2000020c

08000d60 <_fwalk_sglue>:
 8000d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d64:	4607      	mov	r7, r0
 8000d66:	4688      	mov	r8, r1
 8000d68:	4614      	mov	r4, r2
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d70:	f1b9 0901 	subs.w	r9, r9, #1
 8000d74:	d505      	bpl.n	8000d82 <_fwalk_sglue+0x22>
 8000d76:	6824      	ldr	r4, [r4, #0]
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d1f7      	bne.n	8000d6c <_fwalk_sglue+0xc>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d82:	89ab      	ldrh	r3, [r5, #12]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d907      	bls.n	8000d98 <_fwalk_sglue+0x38>
 8000d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	d003      	beq.n	8000d98 <_fwalk_sglue+0x38>
 8000d90:	4629      	mov	r1, r5
 8000d92:	4638      	mov	r0, r7
 8000d94:	47c0      	blx	r8
 8000d96:	4306      	orrs	r6, r0
 8000d98:	3568      	adds	r5, #104	; 0x68
 8000d9a:	e7e9      	b.n	8000d70 <_fwalk_sglue+0x10>

08000d9c <iprintf>:
 8000d9c:	b40f      	push	{r0, r1, r2, r3}
 8000d9e:	b507      	push	{r0, r1, r2, lr}
 8000da0:	4906      	ldr	r1, [pc, #24]	; (8000dbc <iprintf+0x20>)
 8000da2:	ab04      	add	r3, sp, #16
 8000da4:	6808      	ldr	r0, [r1, #0]
 8000da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000daa:	6881      	ldr	r1, [r0, #8]
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	f000 f9e9 	bl	8001184 <_vfiprintf_r>
 8000db2:	b003      	add	sp, #12
 8000db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr
 8000dbc:	2000005c 	.word	0x2000005c

08000dc0 <__sread>:
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dc8:	f000 f868 	bl	8000e9c <_read_r>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	bfab      	itete	ge
 8000dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000dd4:	181b      	addge	r3, r3, r0
 8000dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dda:	bfac      	ite	ge
 8000ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dde:	81a3      	strhlt	r3, [r4, #12]
 8000de0:	bd10      	pop	{r4, pc}

08000de2 <__swrite>:
 8000de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de6:	461f      	mov	r7, r3
 8000de8:	898b      	ldrh	r3, [r1, #12]
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	4605      	mov	r5, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4616      	mov	r6, r2
 8000df2:	d505      	bpl.n	8000e00 <__swrite+0x1e>
 8000df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f000 f83c 	bl	8000e78 <_lseek_r>
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	4632      	mov	r2, r6
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4628      	mov	r0, r5
 8000e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e16:	f000 b853 	b.w	8000ec0 <_write_r>

08000e1a <__sseek>:
 8000e1a:	b510      	push	{r4, lr}
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e22:	f000 f829 	bl	8000e78 <_lseek_r>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	bf15      	itete	ne
 8000e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e36:	81a3      	strheq	r3, [r4, #12]
 8000e38:	bf18      	it	ne
 8000e3a:	81a3      	strhne	r3, [r4, #12]
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <__sclose>:
 8000e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e42:	f000 b809 	b.w	8000e58 <_close_r>

08000e46 <memset>:
 8000e46:	4402      	add	r2, r0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <memset+0xa>
 8000e4e:	4770      	bx	lr
 8000e50:	f803 1b01 	strb.w	r1, [r3], #1
 8000e54:	e7f9      	b.n	8000e4a <memset+0x4>
	...

08000e58 <_close_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d06      	ldr	r5, [pc, #24]	; (8000e74 <_close_r+0x1c>)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	602b      	str	r3, [r5, #0]
 8000e64:	f7ff fc83 	bl	800076e <_close>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	d102      	bne.n	8000e72 <_close_r+0x1a>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <_close_r+0x1a>
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	20000210 	.word	0x20000210

08000e78 <_lseek_r>:
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	4d07      	ldr	r5, [pc, #28]	; (8000e98 <_lseek_r+0x20>)
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4611      	mov	r1, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	602a      	str	r2, [r5, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	f7ff fc98 	bl	80007bc <_lseek>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_lseek_r+0x1e>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_lseek_r+0x1e>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	20000210 	.word	0x20000210

08000e9c <_read_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4d07      	ldr	r5, [pc, #28]	; (8000ebc <_read_r+0x20>)
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	602a      	str	r2, [r5, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f7ff fc26 	bl	80006fc <_read>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	d102      	bne.n	8000eba <_read_r+0x1e>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	b103      	cbz	r3, 8000eba <_read_r+0x1e>
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	20000210 	.word	0x20000210

08000ec0 <_write_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4d07      	ldr	r5, [pc, #28]	; (8000ee0 <_write_r+0x20>)
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	4611      	mov	r1, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	602a      	str	r2, [r5, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f7ff fc31 	bl	8000736 <_write>
 8000ed4:	1c43      	adds	r3, r0, #1
 8000ed6:	d102      	bne.n	8000ede <_write_r+0x1e>
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	b103      	cbz	r3, 8000ede <_write_r+0x1e>
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
 8000ee0:	20000210 	.word	0x20000210

08000ee4 <__errno>:
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <__errno+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000005c 	.word	0x2000005c

08000ef0 <__libc_init_array>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	4d0d      	ldr	r5, [pc, #52]	; (8000f28 <__libc_init_array+0x38>)
 8000ef4:	4c0d      	ldr	r4, [pc, #52]	; (8000f2c <__libc_init_array+0x3c>)
 8000ef6:	1b64      	subs	r4, r4, r5
 8000ef8:	10a4      	asrs	r4, r4, #2
 8000efa:	2600      	movs	r6, #0
 8000efc:	42a6      	cmp	r6, r4
 8000efe:	d109      	bne.n	8000f14 <__libc_init_array+0x24>
 8000f00:	4d0b      	ldr	r5, [pc, #44]	; (8000f30 <__libc_init_array+0x40>)
 8000f02:	4c0c      	ldr	r4, [pc, #48]	; (8000f34 <__libc_init_array+0x44>)
 8000f04:	f000 fdc0 	bl	8001a88 <_init>
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	10a4      	asrs	r4, r4, #2
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	42a6      	cmp	r6, r4
 8000f10:	d105      	bne.n	8000f1e <__libc_init_array+0x2e>
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f18:	4798      	blx	r3
 8000f1a:	3601      	adds	r6, #1
 8000f1c:	e7ee      	b.n	8000efc <__libc_init_array+0xc>
 8000f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f22:	4798      	blx	r3
 8000f24:	3601      	adds	r6, #1
 8000f26:	e7f2      	b.n	8000f0e <__libc_init_array+0x1e>
 8000f28:	08001b30 	.word	0x08001b30
 8000f2c:	08001b30 	.word	0x08001b30
 8000f30:	08001b30 	.word	0x08001b30
 8000f34:	08001b34 	.word	0x08001b34

08000f38 <__retarget_lock_init_recursive>:
 8000f38:	4770      	bx	lr

08000f3a <__retarget_lock_acquire_recursive>:
 8000f3a:	4770      	bx	lr

08000f3c <__retarget_lock_release_recursive>:
 8000f3c:	4770      	bx	lr
	...

08000f40 <_free_r>:
 8000f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d044      	beq.n	8000fd0 <_free_r+0x90>
 8000f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f4a:	9001      	str	r0, [sp, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8000f52:	bfb8      	it	lt
 8000f54:	18e4      	addlt	r4, r4, r3
 8000f56:	f000 f8df 	bl	8001118 <__malloc_lock>
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <_free_r+0x94>)
 8000f5c:	9801      	ldr	r0, [sp, #4]
 8000f5e:	6813      	ldr	r3, [r2, #0]
 8000f60:	b933      	cbnz	r3, 8000f70 <_free_r+0x30>
 8000f62:	6063      	str	r3, [r4, #4]
 8000f64:	6014      	str	r4, [r2, #0]
 8000f66:	b003      	add	sp, #12
 8000f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f6c:	f000 b8da 	b.w	8001124 <__malloc_unlock>
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d908      	bls.n	8000f86 <_free_r+0x46>
 8000f74:	6825      	ldr	r5, [r4, #0]
 8000f76:	1961      	adds	r1, r4, r5
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	bf01      	itttt	eq
 8000f7c:	6819      	ldreq	r1, [r3, #0]
 8000f7e:	685b      	ldreq	r3, [r3, #4]
 8000f80:	1949      	addeq	r1, r1, r5
 8000f82:	6021      	streq	r1, [r4, #0]
 8000f84:	e7ed      	b.n	8000f62 <_free_r+0x22>
 8000f86:	461a      	mov	r2, r3
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	b10b      	cbz	r3, 8000f90 <_free_r+0x50>
 8000f8c:	42a3      	cmp	r3, r4
 8000f8e:	d9fa      	bls.n	8000f86 <_free_r+0x46>
 8000f90:	6811      	ldr	r1, [r2, #0]
 8000f92:	1855      	adds	r5, r2, r1
 8000f94:	42a5      	cmp	r5, r4
 8000f96:	d10b      	bne.n	8000fb0 <_free_r+0x70>
 8000f98:	6824      	ldr	r4, [r4, #0]
 8000f9a:	4421      	add	r1, r4
 8000f9c:	1854      	adds	r4, r2, r1
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	6011      	str	r1, [r2, #0]
 8000fa2:	d1e0      	bne.n	8000f66 <_free_r+0x26>
 8000fa4:	681c      	ldr	r4, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	6053      	str	r3, [r2, #4]
 8000faa:	440c      	add	r4, r1
 8000fac:	6014      	str	r4, [r2, #0]
 8000fae:	e7da      	b.n	8000f66 <_free_r+0x26>
 8000fb0:	d902      	bls.n	8000fb8 <_free_r+0x78>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	6003      	str	r3, [r0, #0]
 8000fb6:	e7d6      	b.n	8000f66 <_free_r+0x26>
 8000fb8:	6825      	ldr	r5, [r4, #0]
 8000fba:	1961      	adds	r1, r4, r5
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf04      	itt	eq
 8000fc0:	6819      	ldreq	r1, [r3, #0]
 8000fc2:	685b      	ldreq	r3, [r3, #4]
 8000fc4:	6063      	str	r3, [r4, #4]
 8000fc6:	bf04      	itt	eq
 8000fc8:	1949      	addeq	r1, r1, r5
 8000fca:	6021      	streq	r1, [r4, #0]
 8000fcc:	6054      	str	r4, [r2, #4]
 8000fce:	e7ca      	b.n	8000f66 <_free_r+0x26>
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd30      	pop	{r4, r5, pc}
 8000fd4:	20000218 	.word	0x20000218

08000fd8 <sbrk_aligned>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4e0e      	ldr	r6, [pc, #56]	; (8001014 <sbrk_aligned+0x3c>)
 8000fdc:	460c      	mov	r4, r1
 8000fde:	6831      	ldr	r1, [r6, #0]
 8000fe0:	4605      	mov	r5, r0
 8000fe2:	b911      	cbnz	r1, 8000fea <sbrk_aligned+0x12>
 8000fe4:	f000 fcbc 	bl	8001960 <_sbrk_r>
 8000fe8:	6030      	str	r0, [r6, #0]
 8000fea:	4621      	mov	r1, r4
 8000fec:	4628      	mov	r0, r5
 8000fee:	f000 fcb7 	bl	8001960 <_sbrk_r>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	d00a      	beq.n	800100c <sbrk_aligned+0x34>
 8000ff6:	1cc4      	adds	r4, r0, #3
 8000ff8:	f024 0403 	bic.w	r4, r4, #3
 8000ffc:	42a0      	cmp	r0, r4
 8000ffe:	d007      	beq.n	8001010 <sbrk_aligned+0x38>
 8001000:	1a21      	subs	r1, r4, r0
 8001002:	4628      	mov	r0, r5
 8001004:	f000 fcac 	bl	8001960 <_sbrk_r>
 8001008:	3001      	adds	r0, #1
 800100a:	d101      	bne.n	8001010 <sbrk_aligned+0x38>
 800100c:	f04f 34ff 	mov.w	r4, #4294967295
 8001010:	4620      	mov	r0, r4
 8001012:	bd70      	pop	{r4, r5, r6, pc}
 8001014:	2000021c 	.word	0x2000021c

08001018 <_malloc_r>:
 8001018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800101c:	1ccd      	adds	r5, r1, #3
 800101e:	f025 0503 	bic.w	r5, r5, #3
 8001022:	3508      	adds	r5, #8
 8001024:	2d0c      	cmp	r5, #12
 8001026:	bf38      	it	cc
 8001028:	250c      	movcc	r5, #12
 800102a:	2d00      	cmp	r5, #0
 800102c:	4607      	mov	r7, r0
 800102e:	db01      	blt.n	8001034 <_malloc_r+0x1c>
 8001030:	42a9      	cmp	r1, r5
 8001032:	d905      	bls.n	8001040 <_malloc_r+0x28>
 8001034:	230c      	movs	r3, #12
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	2600      	movs	r6, #0
 800103a:	4630      	mov	r0, r6
 800103c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001114 <_malloc_r+0xfc>
 8001044:	f000 f868 	bl	8001118 <__malloc_lock>
 8001048:	f8d8 3000 	ldr.w	r3, [r8]
 800104c:	461c      	mov	r4, r3
 800104e:	bb5c      	cbnz	r4, 80010a8 <_malloc_r+0x90>
 8001050:	4629      	mov	r1, r5
 8001052:	4638      	mov	r0, r7
 8001054:	f7ff ffc0 	bl	8000fd8 <sbrk_aligned>
 8001058:	1c43      	adds	r3, r0, #1
 800105a:	4604      	mov	r4, r0
 800105c:	d155      	bne.n	800110a <_malloc_r+0xf2>
 800105e:	f8d8 4000 	ldr.w	r4, [r8]
 8001062:	4626      	mov	r6, r4
 8001064:	2e00      	cmp	r6, #0
 8001066:	d145      	bne.n	80010f4 <_malloc_r+0xdc>
 8001068:	2c00      	cmp	r4, #0
 800106a:	d048      	beq.n	80010fe <_malloc_r+0xe6>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	4631      	mov	r1, r6
 8001070:	4638      	mov	r0, r7
 8001072:	eb04 0903 	add.w	r9, r4, r3
 8001076:	f000 fc73 	bl	8001960 <_sbrk_r>
 800107a:	4581      	cmp	r9, r0
 800107c:	d13f      	bne.n	80010fe <_malloc_r+0xe6>
 800107e:	6821      	ldr	r1, [r4, #0]
 8001080:	1a6d      	subs	r5, r5, r1
 8001082:	4629      	mov	r1, r5
 8001084:	4638      	mov	r0, r7
 8001086:	f7ff ffa7 	bl	8000fd8 <sbrk_aligned>
 800108a:	3001      	adds	r0, #1
 800108c:	d037      	beq.n	80010fe <_malloc_r+0xe6>
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	442b      	add	r3, r5
 8001092:	6023      	str	r3, [r4, #0]
 8001094:	f8d8 3000 	ldr.w	r3, [r8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d038      	beq.n	800110e <_malloc_r+0xf6>
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	42a2      	cmp	r2, r4
 80010a0:	d12b      	bne.n	80010fa <_malloc_r+0xe2>
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	e00f      	b.n	80010c8 <_malloc_r+0xb0>
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	1b52      	subs	r2, r2, r5
 80010ac:	d41f      	bmi.n	80010ee <_malloc_r+0xd6>
 80010ae:	2a0b      	cmp	r2, #11
 80010b0:	d917      	bls.n	80010e2 <_malloc_r+0xca>
 80010b2:	1961      	adds	r1, r4, r5
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	6025      	str	r5, [r4, #0]
 80010b8:	bf18      	it	ne
 80010ba:	6059      	strne	r1, [r3, #4]
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	bf08      	it	eq
 80010c0:	f8c8 1000 	streq.w	r1, [r8]
 80010c4:	5162      	str	r2, [r4, r5]
 80010c6:	604b      	str	r3, [r1, #4]
 80010c8:	4638      	mov	r0, r7
 80010ca:	f104 060b 	add.w	r6, r4, #11
 80010ce:	f000 f829 	bl	8001124 <__malloc_unlock>
 80010d2:	f026 0607 	bic.w	r6, r6, #7
 80010d6:	1d23      	adds	r3, r4, #4
 80010d8:	1af2      	subs	r2, r6, r3
 80010da:	d0ae      	beq.n	800103a <_malloc_r+0x22>
 80010dc:	1b9b      	subs	r3, r3, r6
 80010de:	50a3      	str	r3, [r4, r2]
 80010e0:	e7ab      	b.n	800103a <_malloc_r+0x22>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	6862      	ldr	r2, [r4, #4]
 80010e6:	d1dd      	bne.n	80010a4 <_malloc_r+0x8c>
 80010e8:	f8c8 2000 	str.w	r2, [r8]
 80010ec:	e7ec      	b.n	80010c8 <_malloc_r+0xb0>
 80010ee:	4623      	mov	r3, r4
 80010f0:	6864      	ldr	r4, [r4, #4]
 80010f2:	e7ac      	b.n	800104e <_malloc_r+0x36>
 80010f4:	4634      	mov	r4, r6
 80010f6:	6876      	ldr	r6, [r6, #4]
 80010f8:	e7b4      	b.n	8001064 <_malloc_r+0x4c>
 80010fa:	4613      	mov	r3, r2
 80010fc:	e7cc      	b.n	8001098 <_malloc_r+0x80>
 80010fe:	230c      	movs	r3, #12
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4638      	mov	r0, r7
 8001104:	f000 f80e 	bl	8001124 <__malloc_unlock>
 8001108:	e797      	b.n	800103a <_malloc_r+0x22>
 800110a:	6025      	str	r5, [r4, #0]
 800110c:	e7dc      	b.n	80010c8 <_malloc_r+0xb0>
 800110e:	605b      	str	r3, [r3, #4]
 8001110:	deff      	udf	#255	; 0xff
 8001112:	bf00      	nop
 8001114:	20000218 	.word	0x20000218

08001118 <__malloc_lock>:
 8001118:	4801      	ldr	r0, [pc, #4]	; (8001120 <__malloc_lock+0x8>)
 800111a:	f7ff bf0e 	b.w	8000f3a <__retarget_lock_acquire_recursive>
 800111e:	bf00      	nop
 8001120:	20000214 	.word	0x20000214

08001124 <__malloc_unlock>:
 8001124:	4801      	ldr	r0, [pc, #4]	; (800112c <__malloc_unlock+0x8>)
 8001126:	f7ff bf09 	b.w	8000f3c <__retarget_lock_release_recursive>
 800112a:	bf00      	nop
 800112c:	20000214 	.word	0x20000214

08001130 <__sfputc_r>:
 8001130:	6893      	ldr	r3, [r2, #8]
 8001132:	3b01      	subs	r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	b410      	push	{r4}
 8001138:	6093      	str	r3, [r2, #8]
 800113a:	da08      	bge.n	800114e <__sfputc_r+0x1e>
 800113c:	6994      	ldr	r4, [r2, #24]
 800113e:	42a3      	cmp	r3, r4
 8001140:	db01      	blt.n	8001146 <__sfputc_r+0x16>
 8001142:	290a      	cmp	r1, #10
 8001144:	d103      	bne.n	800114e <__sfputc_r+0x1e>
 8001146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800114a:	f000 bb73 	b.w	8001834 <__swbuf_r>
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	1c58      	adds	r0, r3, #1
 8001152:	6010      	str	r0, [r2, #0]
 8001154:	7019      	strb	r1, [r3, #0]
 8001156:	4608      	mov	r0, r1
 8001158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800115c:	4770      	bx	lr

0800115e <__sfputs_r>:
 800115e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001160:	4606      	mov	r6, r0
 8001162:	460f      	mov	r7, r1
 8001164:	4614      	mov	r4, r2
 8001166:	18d5      	adds	r5, r2, r3
 8001168:	42ac      	cmp	r4, r5
 800116a:	d101      	bne.n	8001170 <__sfputs_r+0x12>
 800116c:	2000      	movs	r0, #0
 800116e:	e007      	b.n	8001180 <__sfputs_r+0x22>
 8001170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001174:	463a      	mov	r2, r7
 8001176:	4630      	mov	r0, r6
 8001178:	f7ff ffda 	bl	8001130 <__sfputc_r>
 800117c:	1c43      	adds	r3, r0, #1
 800117e:	d1f3      	bne.n	8001168 <__sfputs_r+0xa>
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001184 <_vfiprintf_r>:
 8001184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001188:	460d      	mov	r5, r1
 800118a:	b09d      	sub	sp, #116	; 0x74
 800118c:	4614      	mov	r4, r2
 800118e:	4698      	mov	r8, r3
 8001190:	4606      	mov	r6, r0
 8001192:	b118      	cbz	r0, 800119c <_vfiprintf_r+0x18>
 8001194:	6a03      	ldr	r3, [r0, #32]
 8001196:	b90b      	cbnz	r3, 800119c <_vfiprintf_r+0x18>
 8001198:	f7ff fdca 	bl	8000d30 <__sinit>
 800119c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800119e:	07d9      	lsls	r1, r3, #31
 80011a0:	d405      	bmi.n	80011ae <_vfiprintf_r+0x2a>
 80011a2:	89ab      	ldrh	r3, [r5, #12]
 80011a4:	059a      	lsls	r2, r3, #22
 80011a6:	d402      	bmi.n	80011ae <_vfiprintf_r+0x2a>
 80011a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011aa:	f7ff fec6 	bl	8000f3a <__retarget_lock_acquire_recursive>
 80011ae:	89ab      	ldrh	r3, [r5, #12]
 80011b0:	071b      	lsls	r3, r3, #28
 80011b2:	d501      	bpl.n	80011b8 <_vfiprintf_r+0x34>
 80011b4:	692b      	ldr	r3, [r5, #16]
 80011b6:	b99b      	cbnz	r3, 80011e0 <_vfiprintf_r+0x5c>
 80011b8:	4629      	mov	r1, r5
 80011ba:	4630      	mov	r0, r6
 80011bc:	f000 fb78 	bl	80018b0 <__swsetup_r>
 80011c0:	b170      	cbz	r0, 80011e0 <_vfiprintf_r+0x5c>
 80011c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011c4:	07dc      	lsls	r4, r3, #31
 80011c6:	d504      	bpl.n	80011d2 <_vfiprintf_r+0x4e>
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	b01d      	add	sp, #116	; 0x74
 80011ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d2:	89ab      	ldrh	r3, [r5, #12]
 80011d4:	0598      	lsls	r0, r3, #22
 80011d6:	d4f7      	bmi.n	80011c8 <_vfiprintf_r+0x44>
 80011d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011da:	f7ff feaf 	bl	8000f3c <__retarget_lock_release_recursive>
 80011de:	e7f3      	b.n	80011c8 <_vfiprintf_r+0x44>
 80011e0:	2300      	movs	r3, #0
 80011e2:	9309      	str	r3, [sp, #36]	; 0x24
 80011e4:	2320      	movs	r3, #32
 80011e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80011ee:	2330      	movs	r3, #48	; 0x30
 80011f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80013a4 <_vfiprintf_r+0x220>
 80011f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011f8:	f04f 0901 	mov.w	r9, #1
 80011fc:	4623      	mov	r3, r4
 80011fe:	469a      	mov	sl, r3
 8001200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001204:	b10a      	cbz	r2, 800120a <_vfiprintf_r+0x86>
 8001206:	2a25      	cmp	r2, #37	; 0x25
 8001208:	d1f9      	bne.n	80011fe <_vfiprintf_r+0x7a>
 800120a:	ebba 0b04 	subs.w	fp, sl, r4
 800120e:	d00b      	beq.n	8001228 <_vfiprintf_r+0xa4>
 8001210:	465b      	mov	r3, fp
 8001212:	4622      	mov	r2, r4
 8001214:	4629      	mov	r1, r5
 8001216:	4630      	mov	r0, r6
 8001218:	f7ff ffa1 	bl	800115e <__sfputs_r>
 800121c:	3001      	adds	r0, #1
 800121e:	f000 80a9 	beq.w	8001374 <_vfiprintf_r+0x1f0>
 8001222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001224:	445a      	add	r2, fp
 8001226:	9209      	str	r2, [sp, #36]	; 0x24
 8001228:	f89a 3000 	ldrb.w	r3, [sl]
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a1 	beq.w	8001374 <_vfiprintf_r+0x1f0>
 8001232:	2300      	movs	r3, #0
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800123c:	f10a 0a01 	add.w	sl, sl, #1
 8001240:	9304      	str	r3, [sp, #16]
 8001242:	9307      	str	r3, [sp, #28]
 8001244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001248:	931a      	str	r3, [sp, #104]	; 0x68
 800124a:	4654      	mov	r4, sl
 800124c:	2205      	movs	r2, #5
 800124e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001252:	4854      	ldr	r0, [pc, #336]	; (80013a4 <_vfiprintf_r+0x220>)
 8001254:	f7fe ffbc 	bl	80001d0 <memchr>
 8001258:	9a04      	ldr	r2, [sp, #16]
 800125a:	b9d8      	cbnz	r0, 8001294 <_vfiprintf_r+0x110>
 800125c:	06d1      	lsls	r1, r2, #27
 800125e:	bf44      	itt	mi
 8001260:	2320      	movmi	r3, #32
 8001262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001266:	0713      	lsls	r3, r2, #28
 8001268:	bf44      	itt	mi
 800126a:	232b      	movmi	r3, #43	; 0x2b
 800126c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001270:	f89a 3000 	ldrb.w	r3, [sl]
 8001274:	2b2a      	cmp	r3, #42	; 0x2a
 8001276:	d015      	beq.n	80012a4 <_vfiprintf_r+0x120>
 8001278:	9a07      	ldr	r2, [sp, #28]
 800127a:	4654      	mov	r4, sl
 800127c:	2000      	movs	r0, #0
 800127e:	f04f 0c0a 	mov.w	ip, #10
 8001282:	4621      	mov	r1, r4
 8001284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001288:	3b30      	subs	r3, #48	; 0x30
 800128a:	2b09      	cmp	r3, #9
 800128c:	d94d      	bls.n	800132a <_vfiprintf_r+0x1a6>
 800128e:	b1b0      	cbz	r0, 80012be <_vfiprintf_r+0x13a>
 8001290:	9207      	str	r2, [sp, #28]
 8001292:	e014      	b.n	80012be <_vfiprintf_r+0x13a>
 8001294:	eba0 0308 	sub.w	r3, r0, r8
 8001298:	fa09 f303 	lsl.w	r3, r9, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	9304      	str	r3, [sp, #16]
 80012a0:	46a2      	mov	sl, r4
 80012a2:	e7d2      	b.n	800124a <_vfiprintf_r+0xc6>
 80012a4:	9b03      	ldr	r3, [sp, #12]
 80012a6:	1d19      	adds	r1, r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	9103      	str	r1, [sp, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bfbb      	ittet	lt
 80012b0:	425b      	neglt	r3, r3
 80012b2:	f042 0202 	orrlt.w	r2, r2, #2
 80012b6:	9307      	strge	r3, [sp, #28]
 80012b8:	9307      	strlt	r3, [sp, #28]
 80012ba:	bfb8      	it	lt
 80012bc:	9204      	strlt	r2, [sp, #16]
 80012be:	7823      	ldrb	r3, [r4, #0]
 80012c0:	2b2e      	cmp	r3, #46	; 0x2e
 80012c2:	d10c      	bne.n	80012de <_vfiprintf_r+0x15a>
 80012c4:	7863      	ldrb	r3, [r4, #1]
 80012c6:	2b2a      	cmp	r3, #42	; 0x2a
 80012c8:	d134      	bne.n	8001334 <_vfiprintf_r+0x1b0>
 80012ca:	9b03      	ldr	r3, [sp, #12]
 80012cc:	1d1a      	adds	r2, r3, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	9203      	str	r2, [sp, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bfb8      	it	lt
 80012d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80012da:	3402      	adds	r4, #2
 80012dc:	9305      	str	r3, [sp, #20]
 80012de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80013b4 <_vfiprintf_r+0x230>
 80012e2:	7821      	ldrb	r1, [r4, #0]
 80012e4:	2203      	movs	r2, #3
 80012e6:	4650      	mov	r0, sl
 80012e8:	f7fe ff72 	bl	80001d0 <memchr>
 80012ec:	b138      	cbz	r0, 80012fe <_vfiprintf_r+0x17a>
 80012ee:	9b04      	ldr	r3, [sp, #16]
 80012f0:	eba0 000a 	sub.w	r0, r0, sl
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	4082      	lsls	r2, r0
 80012f8:	4313      	orrs	r3, r2
 80012fa:	3401      	adds	r4, #1
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001302:	4829      	ldr	r0, [pc, #164]	; (80013a8 <_vfiprintf_r+0x224>)
 8001304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001308:	2206      	movs	r2, #6
 800130a:	f7fe ff61 	bl	80001d0 <memchr>
 800130e:	2800      	cmp	r0, #0
 8001310:	d03f      	beq.n	8001392 <_vfiprintf_r+0x20e>
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <_vfiprintf_r+0x228>)
 8001314:	bb1b      	cbnz	r3, 800135e <_vfiprintf_r+0x1da>
 8001316:	9b03      	ldr	r3, [sp, #12]
 8001318:	3307      	adds	r3, #7
 800131a:	f023 0307 	bic.w	r3, r3, #7
 800131e:	3308      	adds	r3, #8
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001324:	443b      	add	r3, r7
 8001326:	9309      	str	r3, [sp, #36]	; 0x24
 8001328:	e768      	b.n	80011fc <_vfiprintf_r+0x78>
 800132a:	fb0c 3202 	mla	r2, ip, r2, r3
 800132e:	460c      	mov	r4, r1
 8001330:	2001      	movs	r0, #1
 8001332:	e7a6      	b.n	8001282 <_vfiprintf_r+0xfe>
 8001334:	2300      	movs	r3, #0
 8001336:	3401      	adds	r4, #1
 8001338:	9305      	str	r3, [sp, #20]
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 0c0a 	mov.w	ip, #10
 8001340:	4620      	mov	r0, r4
 8001342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001346:	3a30      	subs	r2, #48	; 0x30
 8001348:	2a09      	cmp	r2, #9
 800134a:	d903      	bls.n	8001354 <_vfiprintf_r+0x1d0>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0c6      	beq.n	80012de <_vfiprintf_r+0x15a>
 8001350:	9105      	str	r1, [sp, #20]
 8001352:	e7c4      	b.n	80012de <_vfiprintf_r+0x15a>
 8001354:	fb0c 2101 	mla	r1, ip, r1, r2
 8001358:	4604      	mov	r4, r0
 800135a:	2301      	movs	r3, #1
 800135c:	e7f0      	b.n	8001340 <_vfiprintf_r+0x1bc>
 800135e:	ab03      	add	r3, sp, #12
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	462a      	mov	r2, r5
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <_vfiprintf_r+0x22c>)
 8001366:	a904      	add	r1, sp, #16
 8001368:	4630      	mov	r0, r6
 800136a:	f3af 8000 	nop.w
 800136e:	4607      	mov	r7, r0
 8001370:	1c78      	adds	r0, r7, #1
 8001372:	d1d6      	bne.n	8001322 <_vfiprintf_r+0x19e>
 8001374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001376:	07d9      	lsls	r1, r3, #31
 8001378:	d405      	bmi.n	8001386 <_vfiprintf_r+0x202>
 800137a:	89ab      	ldrh	r3, [r5, #12]
 800137c:	059a      	lsls	r2, r3, #22
 800137e:	d402      	bmi.n	8001386 <_vfiprintf_r+0x202>
 8001380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001382:	f7ff fddb 	bl	8000f3c <__retarget_lock_release_recursive>
 8001386:	89ab      	ldrh	r3, [r5, #12]
 8001388:	065b      	lsls	r3, r3, #25
 800138a:	f53f af1d 	bmi.w	80011c8 <_vfiprintf_r+0x44>
 800138e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001390:	e71c      	b.n	80011cc <_vfiprintf_r+0x48>
 8001392:	ab03      	add	r3, sp, #12
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	462a      	mov	r2, r5
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <_vfiprintf_r+0x22c>)
 800139a:	a904      	add	r1, sp, #16
 800139c:	4630      	mov	r0, r6
 800139e:	f000 f879 	bl	8001494 <_printf_i>
 80013a2:	e7e4      	b.n	800136e <_vfiprintf_r+0x1ea>
 80013a4:	08001afc 	.word	0x08001afc
 80013a8:	08001b06 	.word	0x08001b06
 80013ac:	00000000 	.word	0x00000000
 80013b0:	0800115f 	.word	0x0800115f
 80013b4:	08001b02 	.word	0x08001b02

080013b8 <_printf_common>:
 80013b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013bc:	4616      	mov	r6, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	688a      	ldr	r2, [r1, #8]
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bfb8      	it	lt
 80013cc:	4613      	movlt	r3, r2
 80013ce:	6033      	str	r3, [r6, #0]
 80013d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013d4:	4607      	mov	r7, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	b10a      	cbz	r2, 80013de <_printf_common+0x26>
 80013da:	3301      	adds	r3, #1
 80013dc:	6033      	str	r3, [r6, #0]
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	0699      	lsls	r1, r3, #26
 80013e2:	bf42      	ittt	mi
 80013e4:	6833      	ldrmi	r3, [r6, #0]
 80013e6:	3302      	addmi	r3, #2
 80013e8:	6033      	strmi	r3, [r6, #0]
 80013ea:	6825      	ldr	r5, [r4, #0]
 80013ec:	f015 0506 	ands.w	r5, r5, #6
 80013f0:	d106      	bne.n	8001400 <_printf_common+0x48>
 80013f2:	f104 0a19 	add.w	sl, r4, #25
 80013f6:	68e3      	ldr	r3, [r4, #12]
 80013f8:	6832      	ldr	r2, [r6, #0]
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	dc26      	bgt.n	800144e <_printf_common+0x96>
 8001400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001404:	1e13      	subs	r3, r2, #0
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	bf18      	it	ne
 800140a:	2301      	movne	r3, #1
 800140c:	0692      	lsls	r2, r2, #26
 800140e:	d42b      	bmi.n	8001468 <_printf_common+0xb0>
 8001410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001414:	4649      	mov	r1, r9
 8001416:	4638      	mov	r0, r7
 8001418:	47c0      	blx	r8
 800141a:	3001      	adds	r0, #1
 800141c:	d01e      	beq.n	800145c <_printf_common+0xa4>
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	6922      	ldr	r2, [r4, #16]
 8001422:	f003 0306 	and.w	r3, r3, #6
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf02      	ittt	eq
 800142a:	68e5      	ldreq	r5, [r4, #12]
 800142c:	6833      	ldreq	r3, [r6, #0]
 800142e:	1aed      	subeq	r5, r5, r3
 8001430:	68a3      	ldr	r3, [r4, #8]
 8001432:	bf0c      	ite	eq
 8001434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001438:	2500      	movne	r5, #0
 800143a:	4293      	cmp	r3, r2
 800143c:	bfc4      	itt	gt
 800143e:	1a9b      	subgt	r3, r3, r2
 8001440:	18ed      	addgt	r5, r5, r3
 8001442:	2600      	movs	r6, #0
 8001444:	341a      	adds	r4, #26
 8001446:	42b5      	cmp	r5, r6
 8001448:	d11a      	bne.n	8001480 <_printf_common+0xc8>
 800144a:	2000      	movs	r0, #0
 800144c:	e008      	b.n	8001460 <_printf_common+0xa8>
 800144e:	2301      	movs	r3, #1
 8001450:	4652      	mov	r2, sl
 8001452:	4649      	mov	r1, r9
 8001454:	4638      	mov	r0, r7
 8001456:	47c0      	blx	r8
 8001458:	3001      	adds	r0, #1
 800145a:	d103      	bne.n	8001464 <_printf_common+0xac>
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001464:	3501      	adds	r5, #1
 8001466:	e7c6      	b.n	80013f6 <_printf_common+0x3e>
 8001468:	18e1      	adds	r1, r4, r3
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	2030      	movs	r0, #48	; 0x30
 800146e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001472:	4422      	add	r2, r4
 8001474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800147c:	3302      	adds	r3, #2
 800147e:	e7c7      	b.n	8001410 <_printf_common+0x58>
 8001480:	2301      	movs	r3, #1
 8001482:	4622      	mov	r2, r4
 8001484:	4649      	mov	r1, r9
 8001486:	4638      	mov	r0, r7
 8001488:	47c0      	blx	r8
 800148a:	3001      	adds	r0, #1
 800148c:	d0e6      	beq.n	800145c <_printf_common+0xa4>
 800148e:	3601      	adds	r6, #1
 8001490:	e7d9      	b.n	8001446 <_printf_common+0x8e>
	...

08001494 <_printf_i>:
 8001494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001498:	7e0f      	ldrb	r7, [r1, #24]
 800149a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800149c:	2f78      	cmp	r7, #120	; 0x78
 800149e:	4691      	mov	r9, r2
 80014a0:	4680      	mov	r8, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	469a      	mov	sl, r3
 80014a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014aa:	d807      	bhi.n	80014bc <_printf_i+0x28>
 80014ac:	2f62      	cmp	r7, #98	; 0x62
 80014ae:	d80a      	bhi.n	80014c6 <_printf_i+0x32>
 80014b0:	2f00      	cmp	r7, #0
 80014b2:	f000 80d4 	beq.w	800165e <_printf_i+0x1ca>
 80014b6:	2f58      	cmp	r7, #88	; 0x58
 80014b8:	f000 80c0 	beq.w	800163c <_printf_i+0x1a8>
 80014bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014c4:	e03a      	b.n	800153c <_printf_i+0xa8>
 80014c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014ca:	2b15      	cmp	r3, #21
 80014cc:	d8f6      	bhi.n	80014bc <_printf_i+0x28>
 80014ce:	a101      	add	r1, pc, #4	; (adr r1, 80014d4 <_printf_i+0x40>)
 80014d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014d4:	0800152d 	.word	0x0800152d
 80014d8:	08001541 	.word	0x08001541
 80014dc:	080014bd 	.word	0x080014bd
 80014e0:	080014bd 	.word	0x080014bd
 80014e4:	080014bd 	.word	0x080014bd
 80014e8:	080014bd 	.word	0x080014bd
 80014ec:	08001541 	.word	0x08001541
 80014f0:	080014bd 	.word	0x080014bd
 80014f4:	080014bd 	.word	0x080014bd
 80014f8:	080014bd 	.word	0x080014bd
 80014fc:	080014bd 	.word	0x080014bd
 8001500:	08001645 	.word	0x08001645
 8001504:	0800156d 	.word	0x0800156d
 8001508:	080015ff 	.word	0x080015ff
 800150c:	080014bd 	.word	0x080014bd
 8001510:	080014bd 	.word	0x080014bd
 8001514:	08001667 	.word	0x08001667
 8001518:	080014bd 	.word	0x080014bd
 800151c:	0800156d 	.word	0x0800156d
 8001520:	080014bd 	.word	0x080014bd
 8001524:	080014bd 	.word	0x080014bd
 8001528:	08001607 	.word	0x08001607
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	602a      	str	r2, [r5, #0]
 8001534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800153c:	2301      	movs	r3, #1
 800153e:	e09f      	b.n	8001680 <_printf_i+0x1ec>
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	0607      	lsls	r7, r0, #24
 8001546:	f103 0104 	add.w	r1, r3, #4
 800154a:	6029      	str	r1, [r5, #0]
 800154c:	d501      	bpl.n	8001552 <_printf_i+0xbe>
 800154e:	681e      	ldr	r6, [r3, #0]
 8001550:	e003      	b.n	800155a <_printf_i+0xc6>
 8001552:	0646      	lsls	r6, r0, #25
 8001554:	d5fb      	bpl.n	800154e <_printf_i+0xba>
 8001556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800155a:	2e00      	cmp	r6, #0
 800155c:	da03      	bge.n	8001566 <_printf_i+0xd2>
 800155e:	232d      	movs	r3, #45	; 0x2d
 8001560:	4276      	negs	r6, r6
 8001562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001566:	485a      	ldr	r0, [pc, #360]	; (80016d0 <_printf_i+0x23c>)
 8001568:	230a      	movs	r3, #10
 800156a:	e012      	b.n	8001592 <_printf_i+0xfe>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	6820      	ldr	r0, [r4, #0]
 8001570:	1d19      	adds	r1, r3, #4
 8001572:	6029      	str	r1, [r5, #0]
 8001574:	0605      	lsls	r5, r0, #24
 8001576:	d501      	bpl.n	800157c <_printf_i+0xe8>
 8001578:	681e      	ldr	r6, [r3, #0]
 800157a:	e002      	b.n	8001582 <_printf_i+0xee>
 800157c:	0641      	lsls	r1, r0, #25
 800157e:	d5fb      	bpl.n	8001578 <_printf_i+0xe4>
 8001580:	881e      	ldrh	r6, [r3, #0]
 8001582:	4853      	ldr	r0, [pc, #332]	; (80016d0 <_printf_i+0x23c>)
 8001584:	2f6f      	cmp	r7, #111	; 0x6f
 8001586:	bf0c      	ite	eq
 8001588:	2308      	moveq	r3, #8
 800158a:	230a      	movne	r3, #10
 800158c:	2100      	movs	r1, #0
 800158e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001592:	6865      	ldr	r5, [r4, #4]
 8001594:	60a5      	str	r5, [r4, #8]
 8001596:	2d00      	cmp	r5, #0
 8001598:	bfa2      	ittt	ge
 800159a:	6821      	ldrge	r1, [r4, #0]
 800159c:	f021 0104 	bicge.w	r1, r1, #4
 80015a0:	6021      	strge	r1, [r4, #0]
 80015a2:	b90e      	cbnz	r6, 80015a8 <_printf_i+0x114>
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	d04b      	beq.n	8001640 <_printf_i+0x1ac>
 80015a8:	4615      	mov	r5, r2
 80015aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80015ae:	fb03 6711 	mls	r7, r3, r1, r6
 80015b2:	5dc7      	ldrb	r7, [r0, r7]
 80015b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80015b8:	4637      	mov	r7, r6
 80015ba:	42bb      	cmp	r3, r7
 80015bc:	460e      	mov	r6, r1
 80015be:	d9f4      	bls.n	80015aa <_printf_i+0x116>
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d10b      	bne.n	80015dc <_printf_i+0x148>
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	07de      	lsls	r6, r3, #31
 80015c8:	d508      	bpl.n	80015dc <_printf_i+0x148>
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	6861      	ldr	r1, [r4, #4]
 80015ce:	4299      	cmp	r1, r3
 80015d0:	bfde      	ittt	le
 80015d2:	2330      	movle	r3, #48	; 0x30
 80015d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80015dc:	1b52      	subs	r2, r2, r5
 80015de:	6122      	str	r2, [r4, #16]
 80015e0:	f8cd a000 	str.w	sl, [sp]
 80015e4:	464b      	mov	r3, r9
 80015e6:	aa03      	add	r2, sp, #12
 80015e8:	4621      	mov	r1, r4
 80015ea:	4640      	mov	r0, r8
 80015ec:	f7ff fee4 	bl	80013b8 <_printf_common>
 80015f0:	3001      	adds	r0, #1
 80015f2:	d14a      	bne.n	800168a <_printf_i+0x1f6>
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	b004      	add	sp, #16
 80015fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	f043 0320 	orr.w	r3, r3, #32
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	4833      	ldr	r0, [pc, #204]	; (80016d4 <_printf_i+0x240>)
 8001608:	2778      	movs	r7, #120	; 0x78
 800160a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	6829      	ldr	r1, [r5, #0]
 8001612:	061f      	lsls	r7, r3, #24
 8001614:	f851 6b04 	ldr.w	r6, [r1], #4
 8001618:	d402      	bmi.n	8001620 <_printf_i+0x18c>
 800161a:	065f      	lsls	r7, r3, #25
 800161c:	bf48      	it	mi
 800161e:	b2b6      	uxthmi	r6, r6
 8001620:	07df      	lsls	r7, r3, #31
 8001622:	bf48      	it	mi
 8001624:	f043 0320 	orrmi.w	r3, r3, #32
 8001628:	6029      	str	r1, [r5, #0]
 800162a:	bf48      	it	mi
 800162c:	6023      	strmi	r3, [r4, #0]
 800162e:	b91e      	cbnz	r6, 8001638 <_printf_i+0x1a4>
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	f023 0320 	bic.w	r3, r3, #32
 8001636:	6023      	str	r3, [r4, #0]
 8001638:	2310      	movs	r3, #16
 800163a:	e7a7      	b.n	800158c <_printf_i+0xf8>
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <_printf_i+0x23c>)
 800163e:	e7e4      	b.n	800160a <_printf_i+0x176>
 8001640:	4615      	mov	r5, r2
 8001642:	e7bd      	b.n	80015c0 <_printf_i+0x12c>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	6826      	ldr	r6, [r4, #0]
 8001648:	6961      	ldr	r1, [r4, #20]
 800164a:	1d18      	adds	r0, r3, #4
 800164c:	6028      	str	r0, [r5, #0]
 800164e:	0635      	lsls	r5, r6, #24
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	d501      	bpl.n	8001658 <_printf_i+0x1c4>
 8001654:	6019      	str	r1, [r3, #0]
 8001656:	e002      	b.n	800165e <_printf_i+0x1ca>
 8001658:	0670      	lsls	r0, r6, #25
 800165a:	d5fb      	bpl.n	8001654 <_printf_i+0x1c0>
 800165c:	8019      	strh	r1, [r3, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	6123      	str	r3, [r4, #16]
 8001662:	4615      	mov	r5, r2
 8001664:	e7bc      	b.n	80015e0 <_printf_i+0x14c>
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	1d1a      	adds	r2, r3, #4
 800166a:	602a      	str	r2, [r5, #0]
 800166c:	681d      	ldr	r5, [r3, #0]
 800166e:	6862      	ldr	r2, [r4, #4]
 8001670:	2100      	movs	r1, #0
 8001672:	4628      	mov	r0, r5
 8001674:	f7fe fdac 	bl	80001d0 <memchr>
 8001678:	b108      	cbz	r0, 800167e <_printf_i+0x1ea>
 800167a:	1b40      	subs	r0, r0, r5
 800167c:	6060      	str	r0, [r4, #4]
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	6123      	str	r3, [r4, #16]
 8001682:	2300      	movs	r3, #0
 8001684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001688:	e7aa      	b.n	80015e0 <_printf_i+0x14c>
 800168a:	6923      	ldr	r3, [r4, #16]
 800168c:	462a      	mov	r2, r5
 800168e:	4649      	mov	r1, r9
 8001690:	4640      	mov	r0, r8
 8001692:	47d0      	blx	sl
 8001694:	3001      	adds	r0, #1
 8001696:	d0ad      	beq.n	80015f4 <_printf_i+0x160>
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	079b      	lsls	r3, r3, #30
 800169c:	d413      	bmi.n	80016c6 <_printf_i+0x232>
 800169e:	68e0      	ldr	r0, [r4, #12]
 80016a0:	9b03      	ldr	r3, [sp, #12]
 80016a2:	4298      	cmp	r0, r3
 80016a4:	bfb8      	it	lt
 80016a6:	4618      	movlt	r0, r3
 80016a8:	e7a6      	b.n	80015f8 <_printf_i+0x164>
 80016aa:	2301      	movs	r3, #1
 80016ac:	4632      	mov	r2, r6
 80016ae:	4649      	mov	r1, r9
 80016b0:	4640      	mov	r0, r8
 80016b2:	47d0      	blx	sl
 80016b4:	3001      	adds	r0, #1
 80016b6:	d09d      	beq.n	80015f4 <_printf_i+0x160>
 80016b8:	3501      	adds	r5, #1
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	9903      	ldr	r1, [sp, #12]
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	dcf2      	bgt.n	80016aa <_printf_i+0x216>
 80016c4:	e7eb      	b.n	800169e <_printf_i+0x20a>
 80016c6:	2500      	movs	r5, #0
 80016c8:	f104 0619 	add.w	r6, r4, #25
 80016cc:	e7f5      	b.n	80016ba <_printf_i+0x226>
 80016ce:	bf00      	nop
 80016d0:	08001b0d 	.word	0x08001b0d
 80016d4:	08001b1e 	.word	0x08001b1e

080016d8 <__sflush_r>:
 80016d8:	898a      	ldrh	r2, [r1, #12]
 80016da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016de:	4605      	mov	r5, r0
 80016e0:	0710      	lsls	r0, r2, #28
 80016e2:	460c      	mov	r4, r1
 80016e4:	d458      	bmi.n	8001798 <__sflush_r+0xc0>
 80016e6:	684b      	ldr	r3, [r1, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dc05      	bgt.n	80016f8 <__sflush_r+0x20>
 80016ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dc02      	bgt.n	80016f8 <__sflush_r+0x20>
 80016f2:	2000      	movs	r0, #0
 80016f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d0f9      	beq.n	80016f2 <__sflush_r+0x1a>
 80016fe:	2300      	movs	r3, #0
 8001700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001704:	682f      	ldr	r7, [r5, #0]
 8001706:	6a21      	ldr	r1, [r4, #32]
 8001708:	602b      	str	r3, [r5, #0]
 800170a:	d032      	beq.n	8001772 <__sflush_r+0x9a>
 800170c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800170e:	89a3      	ldrh	r3, [r4, #12]
 8001710:	075a      	lsls	r2, r3, #29
 8001712:	d505      	bpl.n	8001720 <__sflush_r+0x48>
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	1ac0      	subs	r0, r0, r3
 8001718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800171a:	b10b      	cbz	r3, 8001720 <__sflush_r+0x48>
 800171c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800171e:	1ac0      	subs	r0, r0, r3
 8001720:	2300      	movs	r3, #0
 8001722:	4602      	mov	r2, r0
 8001724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001726:	6a21      	ldr	r1, [r4, #32]
 8001728:	4628      	mov	r0, r5
 800172a:	47b0      	blx	r6
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	d106      	bne.n	8001740 <__sflush_r+0x68>
 8001732:	6829      	ldr	r1, [r5, #0]
 8001734:	291d      	cmp	r1, #29
 8001736:	d82b      	bhi.n	8001790 <__sflush_r+0xb8>
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <__sflush_r+0x108>)
 800173a:	410a      	asrs	r2, r1
 800173c:	07d6      	lsls	r6, r2, #31
 800173e:	d427      	bmi.n	8001790 <__sflush_r+0xb8>
 8001740:	2200      	movs	r2, #0
 8001742:	6062      	str	r2, [r4, #4]
 8001744:	04d9      	lsls	r1, r3, #19
 8001746:	6922      	ldr	r2, [r4, #16]
 8001748:	6022      	str	r2, [r4, #0]
 800174a:	d504      	bpl.n	8001756 <__sflush_r+0x7e>
 800174c:	1c42      	adds	r2, r0, #1
 800174e:	d101      	bne.n	8001754 <__sflush_r+0x7c>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b903      	cbnz	r3, 8001756 <__sflush_r+0x7e>
 8001754:	6560      	str	r0, [r4, #84]	; 0x54
 8001756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001758:	602f      	str	r7, [r5, #0]
 800175a:	2900      	cmp	r1, #0
 800175c:	d0c9      	beq.n	80016f2 <__sflush_r+0x1a>
 800175e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001762:	4299      	cmp	r1, r3
 8001764:	d002      	beq.n	800176c <__sflush_r+0x94>
 8001766:	4628      	mov	r0, r5
 8001768:	f7ff fbea 	bl	8000f40 <_free_r>
 800176c:	2000      	movs	r0, #0
 800176e:	6360      	str	r0, [r4, #52]	; 0x34
 8001770:	e7c0      	b.n	80016f4 <__sflush_r+0x1c>
 8001772:	2301      	movs	r3, #1
 8001774:	4628      	mov	r0, r5
 8001776:	47b0      	blx	r6
 8001778:	1c41      	adds	r1, r0, #1
 800177a:	d1c8      	bne.n	800170e <__sflush_r+0x36>
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0c5      	beq.n	800170e <__sflush_r+0x36>
 8001782:	2b1d      	cmp	r3, #29
 8001784:	d001      	beq.n	800178a <__sflush_r+0xb2>
 8001786:	2b16      	cmp	r3, #22
 8001788:	d101      	bne.n	800178e <__sflush_r+0xb6>
 800178a:	602f      	str	r7, [r5, #0]
 800178c:	e7b1      	b.n	80016f2 <__sflush_r+0x1a>
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001794:	81a3      	strh	r3, [r4, #12]
 8001796:	e7ad      	b.n	80016f4 <__sflush_r+0x1c>
 8001798:	690f      	ldr	r7, [r1, #16]
 800179a:	2f00      	cmp	r7, #0
 800179c:	d0a9      	beq.n	80016f2 <__sflush_r+0x1a>
 800179e:	0793      	lsls	r3, r2, #30
 80017a0:	680e      	ldr	r6, [r1, #0]
 80017a2:	bf08      	it	eq
 80017a4:	694b      	ldreq	r3, [r1, #20]
 80017a6:	600f      	str	r7, [r1, #0]
 80017a8:	bf18      	it	ne
 80017aa:	2300      	movne	r3, #0
 80017ac:	eba6 0807 	sub.w	r8, r6, r7
 80017b0:	608b      	str	r3, [r1, #8]
 80017b2:	f1b8 0f00 	cmp.w	r8, #0
 80017b6:	dd9c      	ble.n	80016f2 <__sflush_r+0x1a>
 80017b8:	6a21      	ldr	r1, [r4, #32]
 80017ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017bc:	4643      	mov	r3, r8
 80017be:	463a      	mov	r2, r7
 80017c0:	4628      	mov	r0, r5
 80017c2:	47b0      	blx	r6
 80017c4:	2800      	cmp	r0, #0
 80017c6:	dc06      	bgt.n	80017d6 <__sflush_r+0xfe>
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ce:	81a3      	strh	r3, [r4, #12]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	e78e      	b.n	80016f4 <__sflush_r+0x1c>
 80017d6:	4407      	add	r7, r0
 80017d8:	eba8 0800 	sub.w	r8, r8, r0
 80017dc:	e7e9      	b.n	80017b2 <__sflush_r+0xda>
 80017de:	bf00      	nop
 80017e0:	dfbffffe 	.word	0xdfbffffe

080017e4 <_fflush_r>:
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	690b      	ldr	r3, [r1, #16]
 80017e8:	4605      	mov	r5, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	b913      	cbnz	r3, 80017f4 <_fflush_r+0x10>
 80017ee:	2500      	movs	r5, #0
 80017f0:	4628      	mov	r0, r5
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
 80017f4:	b118      	cbz	r0, 80017fe <_fflush_r+0x1a>
 80017f6:	6a03      	ldr	r3, [r0, #32]
 80017f8:	b90b      	cbnz	r3, 80017fe <_fflush_r+0x1a>
 80017fa:	f7ff fa99 	bl	8000d30 <__sinit>
 80017fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f3      	beq.n	80017ee <_fflush_r+0xa>
 8001806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001808:	07d0      	lsls	r0, r2, #31
 800180a:	d404      	bmi.n	8001816 <_fflush_r+0x32>
 800180c:	0599      	lsls	r1, r3, #22
 800180e:	d402      	bmi.n	8001816 <_fflush_r+0x32>
 8001810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001812:	f7ff fb92 	bl	8000f3a <__retarget_lock_acquire_recursive>
 8001816:	4628      	mov	r0, r5
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff ff5d 	bl	80016d8 <__sflush_r>
 800181e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001820:	07da      	lsls	r2, r3, #31
 8001822:	4605      	mov	r5, r0
 8001824:	d4e4      	bmi.n	80017f0 <_fflush_r+0xc>
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	059b      	lsls	r3, r3, #22
 800182a:	d4e1      	bmi.n	80017f0 <_fflush_r+0xc>
 800182c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800182e:	f7ff fb85 	bl	8000f3c <__retarget_lock_release_recursive>
 8001832:	e7dd      	b.n	80017f0 <_fflush_r+0xc>

08001834 <__swbuf_r>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	460e      	mov	r6, r1
 8001838:	4614      	mov	r4, r2
 800183a:	4605      	mov	r5, r0
 800183c:	b118      	cbz	r0, 8001846 <__swbuf_r+0x12>
 800183e:	6a03      	ldr	r3, [r0, #32]
 8001840:	b90b      	cbnz	r3, 8001846 <__swbuf_r+0x12>
 8001842:	f7ff fa75 	bl	8000d30 <__sinit>
 8001846:	69a3      	ldr	r3, [r4, #24]
 8001848:	60a3      	str	r3, [r4, #8]
 800184a:	89a3      	ldrh	r3, [r4, #12]
 800184c:	071a      	lsls	r2, r3, #28
 800184e:	d525      	bpl.n	800189c <__swbuf_r+0x68>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	b31b      	cbz	r3, 800189c <__swbuf_r+0x68>
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	6922      	ldr	r2, [r4, #16]
 8001858:	1a98      	subs	r0, r3, r2
 800185a:	6963      	ldr	r3, [r4, #20]
 800185c:	b2f6      	uxtb	r6, r6
 800185e:	4283      	cmp	r3, r0
 8001860:	4637      	mov	r7, r6
 8001862:	dc04      	bgt.n	800186e <__swbuf_r+0x3a>
 8001864:	4621      	mov	r1, r4
 8001866:	4628      	mov	r0, r5
 8001868:	f7ff ffbc 	bl	80017e4 <_fflush_r>
 800186c:	b9e0      	cbnz	r0, 80018a8 <__swbuf_r+0x74>
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60a3      	str	r3, [r4, #8]
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	6022      	str	r2, [r4, #0]
 800187a:	701e      	strb	r6, [r3, #0]
 800187c:	6962      	ldr	r2, [r4, #20]
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	429a      	cmp	r2, r3
 8001882:	d004      	beq.n	800188e <__swbuf_r+0x5a>
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d506      	bpl.n	8001898 <__swbuf_r+0x64>
 800188a:	2e0a      	cmp	r6, #10
 800188c:	d104      	bne.n	8001898 <__swbuf_r+0x64>
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
 8001892:	f7ff ffa7 	bl	80017e4 <_fflush_r>
 8001896:	b938      	cbnz	r0, 80018a8 <__swbuf_r+0x74>
 8001898:	4638      	mov	r0, r7
 800189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189c:	4621      	mov	r1, r4
 800189e:	4628      	mov	r0, r5
 80018a0:	f000 f806 	bl	80018b0 <__swsetup_r>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d0d5      	beq.n	8001854 <__swbuf_r+0x20>
 80018a8:	f04f 37ff 	mov.w	r7, #4294967295
 80018ac:	e7f4      	b.n	8001898 <__swbuf_r+0x64>
	...

080018b0 <__swsetup_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <__swsetup_r+0xac>)
 80018b4:	4605      	mov	r5, r0
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	460c      	mov	r4, r1
 80018ba:	b118      	cbz	r0, 80018c4 <__swsetup_r+0x14>
 80018bc:	6a03      	ldr	r3, [r0, #32]
 80018be:	b90b      	cbnz	r3, 80018c4 <__swsetup_r+0x14>
 80018c0:	f7ff fa36 	bl	8000d30 <__sinit>
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018ca:	0718      	lsls	r0, r3, #28
 80018cc:	d422      	bmi.n	8001914 <__swsetup_r+0x64>
 80018ce:	06d9      	lsls	r1, r3, #27
 80018d0:	d407      	bmi.n	80018e2 <__swsetup_r+0x32>
 80018d2:	2309      	movs	r3, #9
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018da:	81a3      	strh	r3, [r4, #12]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	e034      	b.n	800194c <__swsetup_r+0x9c>
 80018e2:	0758      	lsls	r0, r3, #29
 80018e4:	d512      	bpl.n	800190c <__swsetup_r+0x5c>
 80018e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018e8:	b141      	cbz	r1, 80018fc <__swsetup_r+0x4c>
 80018ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d002      	beq.n	80018f8 <__swsetup_r+0x48>
 80018f2:	4628      	mov	r0, r5
 80018f4:	f7ff fb24 	bl	8000f40 <_free_r>
 80018f8:	2300      	movs	r3, #0
 80018fa:	6363      	str	r3, [r4, #52]	; 0x34
 80018fc:	89a3      	ldrh	r3, [r4, #12]
 80018fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001902:	81a3      	strh	r3, [r4, #12]
 8001904:	2300      	movs	r3, #0
 8001906:	6063      	str	r3, [r4, #4]
 8001908:	6923      	ldr	r3, [r4, #16]
 800190a:	6023      	str	r3, [r4, #0]
 800190c:	89a3      	ldrh	r3, [r4, #12]
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	81a3      	strh	r3, [r4, #12]
 8001914:	6923      	ldr	r3, [r4, #16]
 8001916:	b94b      	cbnz	r3, 800192c <__swsetup_r+0x7c>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800191e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001922:	d003      	beq.n	800192c <__swsetup_r+0x7c>
 8001924:	4621      	mov	r1, r4
 8001926:	4628      	mov	r0, r5
 8001928:	f000 f850 	bl	80019cc <__smakebuf_r>
 800192c:	89a0      	ldrh	r0, [r4, #12]
 800192e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001932:	f010 0301 	ands.w	r3, r0, #1
 8001936:	d00a      	beq.n	800194e <__swsetup_r+0x9e>
 8001938:	2300      	movs	r3, #0
 800193a:	60a3      	str	r3, [r4, #8]
 800193c:	6963      	ldr	r3, [r4, #20]
 800193e:	425b      	negs	r3, r3
 8001940:	61a3      	str	r3, [r4, #24]
 8001942:	6923      	ldr	r3, [r4, #16]
 8001944:	b943      	cbnz	r3, 8001958 <__swsetup_r+0xa8>
 8001946:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800194a:	d1c4      	bne.n	80018d6 <__swsetup_r+0x26>
 800194c:	bd38      	pop	{r3, r4, r5, pc}
 800194e:	0781      	lsls	r1, r0, #30
 8001950:	bf58      	it	pl
 8001952:	6963      	ldrpl	r3, [r4, #20]
 8001954:	60a3      	str	r3, [r4, #8]
 8001956:	e7f4      	b.n	8001942 <__swsetup_r+0x92>
 8001958:	2000      	movs	r0, #0
 800195a:	e7f7      	b.n	800194c <__swsetup_r+0x9c>
 800195c:	2000005c 	.word	0x2000005c

08001960 <_sbrk_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4d06      	ldr	r5, [pc, #24]	; (800197c <_sbrk_r+0x1c>)
 8001964:	2300      	movs	r3, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	602b      	str	r3, [r5, #0]
 800196c:	f7fe ff34 	bl	80007d8 <_sbrk>
 8001970:	1c43      	adds	r3, r0, #1
 8001972:	d102      	bne.n	800197a <_sbrk_r+0x1a>
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	b103      	cbz	r3, 800197a <_sbrk_r+0x1a>
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	20000210 	.word	0x20000210

08001980 <__swhatbuf_r>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	460c      	mov	r4, r1
 8001984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001988:	2900      	cmp	r1, #0
 800198a:	b096      	sub	sp, #88	; 0x58
 800198c:	4615      	mov	r5, r2
 800198e:	461e      	mov	r6, r3
 8001990:	da0d      	bge.n	80019ae <__swhatbuf_r+0x2e>
 8001992:	89a3      	ldrh	r3, [r4, #12]
 8001994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	bf0c      	ite	eq
 800199e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80019a2:	2340      	movne	r3, #64	; 0x40
 80019a4:	2000      	movs	r0, #0
 80019a6:	6031      	str	r1, [r6, #0]
 80019a8:	602b      	str	r3, [r5, #0]
 80019aa:	b016      	add	sp, #88	; 0x58
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	466a      	mov	r2, sp
 80019b0:	f000 f848 	bl	8001a44 <_fstat_r>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	dbec      	blt.n	8001992 <__swhatbuf_r+0x12>
 80019b8:	9901      	ldr	r1, [sp, #4]
 80019ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80019be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80019c2:	4259      	negs	r1, r3
 80019c4:	4159      	adcs	r1, r3
 80019c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ca:	e7eb      	b.n	80019a4 <__swhatbuf_r+0x24>

080019cc <__smakebuf_r>:
 80019cc:	898b      	ldrh	r3, [r1, #12]
 80019ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019d0:	079d      	lsls	r5, r3, #30
 80019d2:	4606      	mov	r6, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	d507      	bpl.n	80019e8 <__smakebuf_r+0x1c>
 80019d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	6123      	str	r3, [r4, #16]
 80019e0:	2301      	movs	r3, #1
 80019e2:	6163      	str	r3, [r4, #20]
 80019e4:	b002      	add	sp, #8
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	ab01      	add	r3, sp, #4
 80019ea:	466a      	mov	r2, sp
 80019ec:	f7ff ffc8 	bl	8001980 <__swhatbuf_r>
 80019f0:	9900      	ldr	r1, [sp, #0]
 80019f2:	4605      	mov	r5, r0
 80019f4:	4630      	mov	r0, r6
 80019f6:	f7ff fb0f 	bl	8001018 <_malloc_r>
 80019fa:	b948      	cbnz	r0, 8001a10 <__smakebuf_r+0x44>
 80019fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a00:	059a      	lsls	r2, r3, #22
 8001a02:	d4ef      	bmi.n	80019e4 <__smakebuf_r+0x18>
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	e7e3      	b.n	80019d8 <__smakebuf_r+0xc>
 8001a10:	89a3      	ldrh	r3, [r4, #12]
 8001a12:	6020      	str	r0, [r4, #0]
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	81a3      	strh	r3, [r4, #12]
 8001a1a:	9b00      	ldr	r3, [sp, #0]
 8001a1c:	6163      	str	r3, [r4, #20]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	6120      	str	r0, [r4, #16]
 8001a22:	b15b      	cbz	r3, 8001a3c <__smakebuf_r+0x70>
 8001a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 f81d 	bl	8001a68 <_isatty_r>
 8001a2e:	b128      	cbz	r0, 8001a3c <__smakebuf_r+0x70>
 8001a30:	89a3      	ldrh	r3, [r4, #12]
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	81a3      	strh	r3, [r4, #12]
 8001a3c:	89a3      	ldrh	r3, [r4, #12]
 8001a3e:	431d      	orrs	r5, r3
 8001a40:	81a5      	strh	r5, [r4, #12]
 8001a42:	e7cf      	b.n	80019e4 <__smakebuf_r+0x18>

08001a44 <_fstat_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4d07      	ldr	r5, [pc, #28]	; (8001a64 <_fstat_r+0x20>)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	602b      	str	r3, [r5, #0]
 8001a52:	f7fe fe98 	bl	8000786 <_fstat>
 8001a56:	1c43      	adds	r3, r0, #1
 8001a58:	d102      	bne.n	8001a60 <_fstat_r+0x1c>
 8001a5a:	682b      	ldr	r3, [r5, #0]
 8001a5c:	b103      	cbz	r3, 8001a60 <_fstat_r+0x1c>
 8001a5e:	6023      	str	r3, [r4, #0]
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
 8001a62:	bf00      	nop
 8001a64:	20000210 	.word	0x20000210

08001a68 <_isatty_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4d06      	ldr	r5, [pc, #24]	; (8001a84 <_isatty_r+0x1c>)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	602b      	str	r3, [r5, #0]
 8001a74:	f7fe fe97 	bl	80007a6 <_isatty>
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	d102      	bne.n	8001a82 <_isatty_r+0x1a>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	b103      	cbz	r3, 8001a82 <_isatty_r+0x1a>
 8001a80:	6023      	str	r3, [r4, #0]
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
 8001a84:	20000210 	.word	0x20000210

08001a88 <_init>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr

08001a94 <_fini>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	bf00      	nop
 8001a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9a:	bc08      	pop	{r3}
 8001a9c:	469e      	mov	lr, r3
 8001a9e:	4770      	bx	lr
